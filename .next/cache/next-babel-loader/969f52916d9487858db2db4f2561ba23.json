{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/modal-sign-up/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Button from '@components/buttons/button';\nimport Modal from '@components/modal';\nimport Loader from '@components/loader';\nimport { closeSignupModal } from '@actions/modals.actions';\nimport userActions from '@actions/user.actions';\nimport { getAccount, getIsLoading } from '@selectors/user.selectors';\nimport { getModalParams } from '@selectors/modal.selectors';\nimport styles from './styles.module.scss';\nimport { useSignMessage, useUserNameAvailable, useMyIP } from '@hooks/espa/user.hooks';\n\nconst ModalSignUp = ({\n  className,\n  title\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const params = useSelector(getModalParams);\n  const {\n    0: userName,\n    1: setUserName\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState(params === null || params === void 0 ? void 0 : params.email);\n  const account = useSelector(getAccount);\n  const isLoading = useSelector(getIsLoading);\n  const signMsg = useSignMessage(account);\n  const isUserNameAvailable = useUserNameAvailable(userName);\n  let myIP = useMyIP();\n\n  const handleClose = () => {\n    dispatch(closeSignupModal());\n  };\n\n  const validateUserName = username => {\n    const regEx = /^[A-Za-z0-9]*$/;\n    return regEx.test(String(username));\n  };\n\n  const validateEmail = email => {\n    const regEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regEx.test(String(email).toLowerCase());\n  };\n\n  const handleClick = () => {\n    if (!signMsg) {\n      if (!validateUserName(userName)) {\n        toast('User ID must contains letters and numbers only!');\n        return;\n      }\n\n      if (!validateEmail(email)) {\n        toast('You have entered an invalid Email address!');\n        return;\n      }\n    }\n\n    dispatch(userActions.tryToSignup(account, userName, email, signMsg, myIP));\n  };\n\n  const userNameChanged = username => {\n    setUserName(username);\n  };\n\n  return __jsx(React.Fragment, null, /*#__PURE__*/createPortal(__jsx(Modal, {\n    onClose: () => handleClose(),\n    title: signMsg ? 'Welcome Back!' : title,\n    className: (className, styles.modalWrapper),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"CURRENT ETH ADDRESS: \".concat(account ? account : 'WALLET NOT CONNECTED')), signMsg === null ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }) : __jsx(React.Fragment, null, signMsg === '' && (myIP === null ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: styles.inputItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: styles.userIdRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 23\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  }, \"USER ID\"), __jsx(\"span\", {\n    className: styles.questionMark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 25\n    }\n  }, \"?\"), __jsx(\"span\", {\n    className: styles.hint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, \"Username must not exceed 10 characters. No special characters allowed, only numbers and letters.\")), __jsx(\"input\", {\n    value: userName,\n    onChange: e => userNameChanged(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }), !isUserNameAvailable && __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, \"That User ID is already taken. Please choose another one\")), __jsx(\"div\", {\n    className: styles.inputItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 23\n    }\n  }, \"EMAIL\"), __jsx(\"input\", {\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    disabled: params === null || params === void 0 ? void 0 : params.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }\n  })))), isLoading ? __jsx(Loader, {\n    size: \"large\",\n    className: styles.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }) : __jsx(Button, {\n    className: styles.modalButton,\n    background: \"black\",\n    onClick: () => handleClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, signMsg ? 'SIGN IN' : 'SIGN UP'))), document.body));\n};\n\n_s(ModalSignUp, \"62AUh/FH815oNDISuOO1L4xU6Kc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSignMessage, useUserNameAvailable, useMyIP];\n});\n\n_c = ModalSignUp;\nModalSignUp.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string\n};\nModalSignUp.defaultProps = {\n  className: '',\n  title: 'CREATE AN ACCOUNT'\n};\nexport default ModalSignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ModalSignUp\");","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/modal-sign-up/index.js"],"names":["React","useState","createPortal","PropTypes","useDispatch","useSelector","toast","Button","Modal","Loader","closeSignupModal","userActions","getAccount","getIsLoading","getModalParams","styles","useSignMessage","useUserNameAvailable","useMyIP","ModalSignUp","className","title","dispatch","params","userName","setUserName","email","setEmail","account","isLoading","signMsg","isUserNameAvailable","myIP","handleClose","validateUserName","username","regEx","test","String","validateEmail","toLowerCase","handleClick","tryToSignup","userNameChanged","modalWrapper","loader","inputItem","userIdRow","questionMark","hint","e","target","value","modalButton","document","body","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport Button from '@components/buttons/button';\nimport Modal from '@components/modal';\nimport Loader from '@components/loader';\n\nimport { closeSignupModal } from '@actions/modals.actions';\nimport userActions from '@actions/user.actions';\n\nimport { getAccount, getIsLoading } from '@selectors/user.selectors';\nimport { getModalParams } from '@selectors/modal.selectors';\n\nimport styles from './styles.module.scss';\nimport { useSignMessage, useUserNameAvailable, useMyIP } from '@hooks/espa/user.hooks';\n\nconst ModalSignUp = ({ className, title }) => {\n  const dispatch = useDispatch();\n  const params = useSelector(getModalParams);\n\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState(params?.email);\n\n  const account = useSelector(getAccount);\n  const isLoading = useSelector(getIsLoading);\n  const signMsg = useSignMessage(account);\n  const isUserNameAvailable = useUserNameAvailable(userName);\n  let myIP = useMyIP();\n\n  const handleClose = () => {\n    dispatch(closeSignupModal());\n  };\n\n  const validateUserName = (username) => {\n    const regEx = /^[A-Za-z0-9]*$/;\n    return regEx.test(String(username));\n  };\n\n  const validateEmail = (email) => {\n    const regEx = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regEx.test(String(email).toLowerCase());\n  };\n\n  const handleClick = () => {\n    if (!signMsg) {\n      if (!validateUserName(userName)) {\n        toast('User ID must contains letters and numbers only!');\n        return;\n      }\n      if (!validateEmail(email)) {\n        toast('You have entered an invalid Email address!');\n        return;\n      }\n    }\n    dispatch(userActions.tryToSignup(account, userName, email, signMsg, myIP));\n  };\n\n  const userNameChanged = (username) => {\n    setUserName(username);\n  };\n\n  return (\n    <>\n      {createPortal(\n        <Modal\n          onClose={() => handleClose()}\n          title={signMsg ? 'Welcome Back!' : title}\n          className={(className, styles.modalWrapper)}\n        >\n          <span>{`CURRENT ETH ADDRESS: ${account ? account : 'WALLET NOT CONNECTED'}`}</span>\n          {signMsg === null ? (\n            <Loader size=\"large\" className={styles.loader} />\n          ) : (\n            <>\n              {signMsg === '' &&\n                (myIP === null ? (\n                  <Loader size=\"large\" className={styles.loader} />\n                ) : (\n                  <>\n                    <div className={styles.inputItem}>\n                      <div className={styles.userIdRow}>\n                        <label>USER ID</label>\n                        <span className={styles.questionMark}>?</span>\n                        <span className={styles.hint}>\n                          Username must not exceed 10 characters. No special characters allowed,\n                          only numbers and letters.\n                        </span>\n                      </div>\n                      <input value={userName} onChange={(e) => userNameChanged(e.target.value)} />\n                      {!isUserNameAvailable && (\n                        <p>That User ID is already taken. Please choose another one</p>\n                      )}\n                    </div>\n                    <div className={styles.inputItem}>\n                      <label>EMAIL</label>\n                      <input\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        disabled={params?.email}\n                      />\n                    </div>\n                  </>\n                ))}\n              {isLoading ? (\n                <Loader size=\"large\" className={styles.loader} />\n              ) : (\n                <Button\n                  className={styles.modalButton}\n                  background=\"black\"\n                  onClick={() => handleClick()}\n                >\n                  {signMsg ? 'SIGN IN' : 'SIGN UP'}\n                </Button>\n              )}\n            </>\n          )}\n        </Modal>,\n        document.body\n      )}\n    </>\n  );\n};\n\nModalSignUp.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n};\n\nModalSignUp.defaultProps = {\n  className: '',\n  title: 'CREATE AN ACCOUNT',\n};\n\nexport default ModalSignUp;\n"]},"metadata":{},"sourceType":"module"}