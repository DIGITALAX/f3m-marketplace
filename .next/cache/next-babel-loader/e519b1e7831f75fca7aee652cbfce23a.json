{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport qs from 'qs';\nimport axiosRetry from 'axios-retry';\nimport { getAuthToken } from '@helpers/user.helpers';\nimport { STAGE_ESPA_BACKEND_URL } from '@constants/global.constants';\nimport 'core-js/es/string';\nimport 'core-js/es/number';\nimport 'core-js/es/array';\n\nrequire('es6-promise').polyfill();\n\nrequire('es6-object-assign').polyfill();\n\nconst DEFAULT_OPTIONS = {\n  withCredentials: true\n};\naxios.defaults.baseURL = STAGE_ESPA_BACKEND_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxiosRetry(axios, {\n  retries: 1,\n  retryCondition: error => !error.response\n});\n/**\n * Execute all requests\n * @param {String} method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\nfunction executeRequest(method, url, data, options = DEFAULT_OPTIONS, headers = {}) {\n  const params = {\n    method,\n    url,\n    data,\n    options: _objectSpread(_objectSpread({}, options), DEFAULT_OPTIONS),\n    headers: {\n      Authorization: getAuthToken()\n    }\n  };\n  return new Promise((resolve, reject) => {\n    axios(params).then(response => {\n      resolve(response.data);\n    }).catch(error => {\n      reject(error);\n    });\n  });\n}\n/**\n * Get method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\n\nexport function get(url, data, options) {\n  const query = qs.stringify(data, {\n    encode: true,\n    arrayFormat: 'brackets'\n  });\n  return executeRequest('get', `${url}?${query || ''}`, null, options);\n}\n/**\n * Post method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\nexport function post(url, data, options) {\n  // if need upload file use this post\n  return executeRequest('post', `${url}`, data, options);\n}\n/**\n * Patch method\n * @param {String}url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\nexport function patch(url, data, options) {\n  return executeRequest('patch', `${url}`, data, options);\n}\n/**\n * Put method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\nexport function put(url, data, options) {\n  return executeRequest('put', `${url}`, data, options);\n}\n/**\n * Delete method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\n\nexport function del(url, data, options) {\n  return executeRequest('delete', `${url}`, data, options);\n}","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/utils/api.js"],"names":["axios","qs","axiosRetry","getAuthToken","STAGE_ESPA_BACKEND_URL","require","polyfill","DEFAULT_OPTIONS","withCredentials","defaults","baseURL","headers","post","retries","retryCondition","error","response","executeRequest","method","url","data","options","params","Authorization","Promise","resolve","reject","then","catch","get","query","stringify","encode","arrayFormat","patch","put","del"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\nimport axiosRetry from 'axios-retry';\nimport { getAuthToken } from '@helpers/user.helpers';\nimport { STAGE_ESPA_BACKEND_URL } from '@constants/global.constants';\n\nimport 'core-js/es/string';\nimport 'core-js/es/number';\nimport 'core-js/es/array';\n\nrequire('es6-promise').polyfill();\nrequire('es6-object-assign').polyfill();\n\nconst DEFAULT_OPTIONS = { withCredentials: true };\n\naxios.defaults.baseURL = STAGE_ESPA_BACKEND_URL;\naxios.defaults.headers.post['Content-Type'] = 'application/json';\n\naxiosRetry(axios, {\n  retries: 1,\n  retryCondition: (error) => !error.response,\n});\n\n/**\n * Execute all requests\n * @param {String} method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nfunction executeRequest(method, url, data, options = DEFAULT_OPTIONS, headers = {}) {\n  const params = {\n    method,\n    url,\n    data,\n    options: {\n      ...options,\n      ...DEFAULT_OPTIONS,\n    },\n    headers: {\n      Authorization: getAuthToken(),\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    axios(params)\n      .then((response) => {\n        resolve(response.data);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n  });\n}\n\n/**\n * Get method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nexport function get(url, data, options) {\n  const query = qs.stringify(data, { encode: true, arrayFormat: 'brackets' });\n  return executeRequest('get', `${url}?${query || ''}`, null, options);\n}\n\n/**\n * Post method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nexport function post(url, data, options) {\n  // if need upload file use this post\n  return executeRequest('post', `${url}`, data, options);\n}\n\n/**\n * Patch method\n * @param {String}url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nexport function patch(url, data, options) {\n  return executeRequest('patch', `${url}`, data, options);\n}\n\n/**\n * Put method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nexport function put(url, data, options) {\n  return executeRequest('put', `${url}`, data, options);\n}\n\n/**\n * Delete method\n * @param {String} url\n * @param {Object} data\n * @param {Object} options\n * @returns {Promise<any>}\n */\nexport function del(url, data, options) {\n  return executeRequest('delete', `${url}`, data, options);\n}\n"]},"metadata":{},"sourceType":"module"}