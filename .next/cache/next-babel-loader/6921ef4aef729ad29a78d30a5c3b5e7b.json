{"ast":null,"code":"import { closeConnectMetamaskModal, closeSignupModal, openNotInstalledMetamask, openSignupModal } from '@actions/modals.actions';\nimport globalActions from '@actions/global.actions';\nimport { STORAGE_IS_LOGGED_IN, STORAGE_USER, STORAGE_TOKEN, STORAGE_WALLET } from '@constants/storage.constants';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\nimport userReducer from '@reducers/user.reducer';\nimport { handleSignMessage, isMetamaskInstalled } from '@services/metamask.service';\nimport { setWeb3Provider } from '@services/web3-provider.service';\nimport { getUser, getAuthToken } from '@helpers/user.helpers';\nimport BaseActions from './base-actions';\nimport api from '@services/api/espa/api.service';\nimport { toast } from 'react-toastify';\nimport Router from 'next/router';\n\nclass UserActions extends BaseActions {\n  handleArkaneWeb3Load() {\n    return async dispatch => {\n      try {\n        const chainId = await window.web3.eth.getChainId();\n        const authResult = await Arkane.checkAuthenticated();\n        const {\n          auth: {\n            idTokenParsed: {\n              email\n            }\n          }\n        } = authResult;\n        const wallets = await window.web3.eth.getAccounts();\n        localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        dispatch(this.setValue('account', wallets[0]));\n        dispatch(closeConnectMetamaskModal());\n        dispatch(openSignupModal({\n          email\n        }));\n        dispatch(globalActions.changeNetwork('0x' + chainId.toString(16)));\n        dispatch(globalActions.setContractParams());\n      } catch (e) {\n        toast.error('Wallet Connect is failed');\n      }\n    };\n  }\n\n  tryToLogin(source) {\n    return async dispatch => {\n      localStorage.setItem(STORAGE_WALLET, source);\n      await setWeb3Provider();\n\n      if (source === WALLET_METAMASK) {\n        if (!isMetamaskInstalled()) {\n          dispatch(openNotInstalledMetamask());\n          console.log('METAMASK WAS NOT DETECTED ON TRY TO LOGIN');\n          console.log('METAMASK WAS NOT DETECTED ON TRY TO LOGIN');\n          return;\n        }\n\n        const {\n          ethereum\n        } = window;\n\n        try {\n          const [account] = await ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n\n          if (!account) {\n            console.error('Account is epmty.');\n            return;\n          }\n\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n          dispatch(this.setValue('account', account));\n          dispatch(closeConnectMetamaskModal());\n          dispatch(openSignupModal());\n          dispatch(globalActions.initApp());\n        } catch (e) {\n          console.error(e.message);\n        }\n      } else if (source === WALLET_ARKANE) {\n        dispatch(this.handleArkaneWeb3Load());\n      }\n    };\n  }\n\n  tryToSignup(account, userName, email, signMsg, ip) {\n    return async dispatch => {\n      dispatch(this.setValue('isLoading', true));\n\n      if (!signMsg) {\n        signMsg = await api.handleSignUp(account, userName, email, ip);\n\n        if (!signMsg) {\n          toast.error('Sign Up is failed');\n          dispatch(this.setValue('isLoading', false));\n          return;\n        }\n      }\n\n      const {\n        signature\n      } = await handleSignMessage({\n        publicAddress: account,\n        signMsg\n      });\n      dispatch(this.tryAuthentication(account, signMsg, signature));\n    };\n  }\n\n  tryAuthentication(account, signMsg, signature) {\n    return async dispatch => {\n      try {\n        const data = await api.handleAuthentication(account, signMsg, signature);\n\n        if (data) {\n          const {\n            returnData,\n            secret\n          } = data;\n          dispatch(this.setValue('user', returnData));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n          localStorage.setItem(STORAGE_USER, JSON.stringify(returnData));\n          localStorage.setItem(STORAGE_TOKEN, secret);\n        } else {\n          dispatch(this.logout());\n        }\n      } catch (e) {\n        console.error(e.message);\n        dispatch(this.logout());\n      }\n\n      dispatch(closeSignupModal());\n      dispatch(this.setValue('isLoading', false));\n    };\n  }\n\n  logout() {\n    return async dispatch => {\n      const WALLET = localStorage.getItem(STORAGE_WALLET);\n\n      if (WALLET === WALLET_ARKANE) {\n        try {\n          Arkane.arkaneConnect().logout();\n        } catch (err) {}\n      }\n\n      dispatch(this.setValue('user', null));\n      localStorage.removeItem(STORAGE_IS_LOGGED_IN);\n      localStorage.removeItem(STORAGE_USER);\n      localStorage.removeItem(STORAGE_TOKEN);\n      localStorage.removeItem(STORAGE_WALLET);\n      Router.push('/');\n    };\n  }\n\n  updateProfile(user) {\n    return async dispatch => {\n      try {\n        const data = await api.updateProfile(user);\n        dispatch(globalActions.setIsLoading(false));\n\n        if (data) {\n          dispatch(this.setValue('user', data));\n          localStorage.setItem(STORAGE_USER, JSON.stringify(data));\n          toast.success('Your profile updated successfully.');\n        } else {}\n      } catch (e) {} // dispatch(this.setValue('isLoading', false));\n\n    };\n  }\n\n  checkStorageAuth() {\n    return async dispatch => {\n      const user = getUser();\n      const token = getAuthToken();\n\n      if (!user || !token) {\n        return;\n      }\n\n      dispatch(this.setValue('user', user));\n    };\n  }\n\n  uploadAvatar(file) {\n    return async dispatch => {\n      try {\n        dispatch(this.setValue('isLoading', true));\n        let url = await api.getPresignedUrl();\n\n        if (url) {\n          const result = await api.uploadImageToS3(url, file);\n\n          if (result) {\n            const user = getUser();\n            const queryIndex = url.indexOf('?');\n\n            if (queryIndex >= 0) {\n              url = url.slice(0, queryIndex);\n            }\n\n            user.avatar = url;\n            dispatch(this.updateProfile(user));\n          }\n        }\n      } catch (e) {}\n\n      dispatch(this.setValue('isLoading', false));\n    };\n  }\n\n}\n\nexport default new UserActions(userReducer);","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/actions/user.actions.js"],"names":["closeConnectMetamaskModal","closeSignupModal","openNotInstalledMetamask","openSignupModal","globalActions","STORAGE_IS_LOGGED_IN","STORAGE_USER","STORAGE_TOKEN","STORAGE_WALLET","WALLET_METAMASK","WALLET_ARKANE","userReducer","handleSignMessage","isMetamaskInstalled","setWeb3Provider","getUser","getAuthToken","BaseActions","api","toast","Router","UserActions","handleArkaneWeb3Load","dispatch","chainId","window","web3","eth","getChainId","authResult","Arkane","checkAuthenticated","auth","idTokenParsed","email","wallets","getAccounts","localStorage","setItem","setValue","changeNetwork","toString","setContractParams","e","error","tryToLogin","source","console","log","ethereum","account","request","method","initApp","message","tryToSignup","userName","signMsg","ip","handleSignUp","signature","publicAddress","tryAuthentication","data","handleAuthentication","returnData","secret","JSON","stringify","logout","WALLET","getItem","arkaneConnect","err","removeItem","push","updateProfile","user","setIsLoading","success","checkStorageAuth","token","uploadAvatar","file","url","getPresignedUrl","result","uploadImageToS3","queryIndex","indexOf","slice","avatar"],"mappings":"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","sourcesContent":["import {\n  closeConnectMetamaskModal,\n  closeSignupModal,\n  openNotInstalledMetamask,\n  openSignupModal,\n} from '@actions/modals.actions';\nimport globalActions from '@actions/global.actions';\nimport {\n  STORAGE_IS_LOGGED_IN,\n  STORAGE_USER,\n  STORAGE_TOKEN,\n  STORAGE_WALLET,\n} from '@constants/storage.constants';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\nimport userReducer from '@reducers/user.reducer';\nimport { handleSignMessage, isMetamaskInstalled } from '@services/metamask.service';\nimport { setWeb3Provider } from '@services/web3-provider.service';\nimport { getUser, getAuthToken } from '@helpers/user.helpers';\nimport BaseActions from './base-actions';\nimport api from '@services/api/espa/api.service';\nimport { toast } from 'react-toastify';\nimport Router from 'next/router';\n\nclass UserActions extends BaseActions {\n  handleArkaneWeb3Load() {\n    return async (dispatch) => {\n      try {\n        const chainId = await window.web3.eth.getChainId();\n        const authResult = await Arkane.checkAuthenticated();\n        const {\n          auth: {\n            idTokenParsed: { email },\n          },\n        } = authResult;\n        const wallets = await window.web3.eth.getAccounts();\n        localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        dispatch(this.setValue('account', wallets[0]));\n        dispatch(closeConnectMetamaskModal());\n        dispatch(openSignupModal({ email }));\n        dispatch(globalActions.changeNetwork('0x' + chainId.toString(16)));\n        dispatch(globalActions.setContractParams());\n      } catch (e) {\n        toast.error('Wallet Connect is failed');\n      }\n    };\n  }\n\n  tryToLogin(source) {\n    return async (dispatch) => {\n      localStorage.setItem(STORAGE_WALLET, source);\n      await setWeb3Provider();\n      if (source === WALLET_METAMASK) {\n        if (!isMetamaskInstalled()) {\n          dispatch(openNotInstalledMetamask());\n          console.log('METAMASK WAS NOT DETECTED ON TRY TO LOGIN');\n          console.log('METAMASK WAS NOT DETECTED ON TRY TO LOGIN');\n          return;\n        }\n\n        const { ethereum } = window;\n\n        try {\n          const [account] = await ethereum.request({\n            method: 'eth_requestAccounts',\n          });\n\n          if (!account) {\n            console.error('Account is epmty.');\n            return;\n          }\n\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n          dispatch(this.setValue('account', account));\n          dispatch(closeConnectMetamaskModal());\n          dispatch(openSignupModal());\n          dispatch(globalActions.initApp());\n        } catch (e) {\n          console.error(e.message);\n        }\n      } else if (source === WALLET_ARKANE) {\n        dispatch(this.handleArkaneWeb3Load());\n      }\n    };\n  }\n\n  tryToSignup(account, userName, email, signMsg, ip) {\n    return async (dispatch) => {\n      dispatch(this.setValue('isLoading', true));\n      if (!signMsg) {\n        signMsg = await api.handleSignUp(account, userName, email, ip);\n        if (!signMsg) {\n          toast.error('Sign Up is failed');\n          dispatch(this.setValue('isLoading', false));\n          return;\n        }\n      }\n\n      const { signature } = await handleSignMessage({\n        publicAddress: account,\n        signMsg,\n      });\n\n      dispatch(this.tryAuthentication(account, signMsg, signature));\n    };\n  }\n\n  tryAuthentication(account, signMsg, signature) {\n    return async (dispatch) => {\n      try {\n        const data = await api.handleAuthentication(account, signMsg, signature);\n        if (data) {\n          const { returnData, secret } = data;\n          dispatch(this.setValue('user', returnData));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n          localStorage.setItem(STORAGE_USER, JSON.stringify(returnData));\n          localStorage.setItem(STORAGE_TOKEN, secret);\n        } else {\n          dispatch(this.logout());\n        }\n      } catch (e) {\n        console.error(e.message);\n        dispatch(this.logout());\n      }\n\n      dispatch(closeSignupModal());\n      dispatch(this.setValue('isLoading', false));\n    };\n  }\n\n  logout() {\n    return async (dispatch) => {\n      const WALLET = localStorage.getItem(STORAGE_WALLET);\n      if (WALLET === WALLET_ARKANE) {\n        try {\n          Arkane.arkaneConnect().logout();\n        } catch (err) {}\n      }\n      dispatch(this.setValue('user', null));\n      localStorage.removeItem(STORAGE_IS_LOGGED_IN);\n      localStorage.removeItem(STORAGE_USER);\n      localStorage.removeItem(STORAGE_TOKEN);\n      localStorage.removeItem(STORAGE_WALLET);\n      Router.push('/');\n    };\n  }\n\n  updateProfile(user) {\n    return async (dispatch) => {\n      try {\n        const data = await api.updateProfile(user);\n        dispatch(globalActions.setIsLoading(false));\n        if (data) {\n          dispatch(this.setValue('user', data));\n          localStorage.setItem(STORAGE_USER, JSON.stringify(data));\n          toast.success('Your profile updated successfully.');\n        } else {\n        }\n      } catch (e) {}\n      // dispatch(this.setValue('isLoading', false));\n    };\n  }\n\n  checkStorageAuth() {\n    return async (dispatch) => {\n      const user = getUser();\n      const token = getAuthToken();\n      if (!user || !token) {\n        return;\n      }\n      dispatch(this.setValue('user', user));\n    };\n  }\n\n  uploadAvatar(file) {\n    return async (dispatch) => {\n      try {\n        dispatch(this.setValue('isLoading', true));\n        let url = await api.getPresignedUrl();\n        if (url) {\n          const result = await api.uploadImageToS3(url, file);\n          if (result) {\n            const user = getUser();\n            const queryIndex = url.indexOf('?');\n            if (queryIndex >= 0) {\n              url = url.slice(0, queryIndex);\n            }\n            user.avatar = url;\n            dispatch(this.updateProfile(user));\n          }\n        }\n      } catch (e) {}\n      dispatch(this.setValue('isLoading', false));\n    };\n  }\n}\n\nexport default new UserActions(userReducer);\n"]},"metadata":{},"sourceType":"module"}