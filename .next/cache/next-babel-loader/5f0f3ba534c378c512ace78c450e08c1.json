{"ast":null,"code":"import moment from 'moment';\nimport Web3 from 'web3';\nimport BaseActions from '@actions/base-actions';\nimport { toast } from 'react-toastify';\nimport userActions from '@actions/user.actions';\nimport auctionActions from '@actions/auction.actions';\nimport auctionPageActions from '@actions/auction.page.actions';\nimport designerActions from '@actions/designer.actions';\nimport designerPageActions from '@actions/designer.page.actions';\nimport garmentActions from '@actions/garment.actions';\nimport garmentPageActions from '@actions/garment.page.actions';\nimport historyActions from '@actions/history.actions';\nimport globalReducer from '@reducers/global.reducer';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport { getRewardContractAddressByChainId, getMarketplaceContractAddressByChainId, getDefaultNetworkChainId, getEnabledNetworkByChainId, getAPIUrlByChainId, getWSUrlByChainId } from '@services/network.service';\nimport { getTokenPriceMatic, getMarketplaceContract } from '@services/contract.service';\nimport api from '@services/api/api.service';\nimport ws from '@services/api/ws.service';\nimport { convertToEth } from '@helpers/price.helpers';\nimport { STORAGE_IS_LOGGED_IN, STORAGE_WALLET } from '@constants/storage.constants';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\n\nclass GlobalActions extends BaseActions {\n  initApp() {\n    return async dispatch => {\n      /**\n       * Get eth/usd rate\n       */\n      try {\n        const rateItem = await api.getEthRate();\n        dispatch(this.setValue('exchangeRateETH', rateItem.ethereum.usd));\n      } catch (e) {\n        toast.error(\"Set USD rate error: \".concat(JSON.stringify(e)));\n      }\n      /**\n       * Check installed Metamask or \n      Check if Arkane loggedIn\n       */\n\n\n      if (localStorage.getItem(STORAGE_IS_LOGGED_IN) && localStorage.getItem(STORAGE_WALLET) === WALLET_ARKANE || !isMetamaskInstalled()) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()));\n        await dispatch(this.setContractParams());\n        dispatch(this.setValue('isInitialized', true));\n        console.log('METAMASK WAS NOT DETECTED ON init');\n        console.log('METAMASK WAS NOT DETECTED ON init');\n        return;\n      }\n\n      const {\n        ethereum\n      } = window;\n      window.web3 = new Web3(ethereum);\n      /**\n       * Init subscribers\n       */\n\n      ethereum.on('accountsChanged', accounts => {\n        const [account] = accounts;\n\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        }\n      });\n\n      if (ethereum.selectedAddress && localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress));\n      }\n\n      ethereum.on('chainChanged', async chainId => {\n        if (!chainId) {\n          return;\n        }\n\n        dispatch(auctionPageActions.clear());\n        dispatch(auctionActions.clear());\n        dispatch(historyActions.clear());\n        dispatch(garmentActions.clear());\n        dispatch(garmentPageActions.clear());\n        dispatch(designerPageActions.clear());\n        dispatch(designerActions.clear());\n        dispatch(this.resetContratParams());\n        dispatch(this.changeNetwork(chainId));\n\n        if (getEnabledNetworkByChainId(chainId)) {\n          await dispatch(this.setContractParams());\n        } else {\n          console.error('Wrong network. Contracts are not deployed yet');\n        }\n      });\n      dispatch(this.changeNetwork(ethereum.chainId));\n      await dispatch(this.setContractParams());\n      dispatch(this.setValue('isInitialized', true));\n    };\n  }\n\n  setContractParams() {\n    return async (dispatch, getState) => {\n      // try {\n      //   const monaPerEth = await getTokenPriceMatic();\n      //   dispatch(this.setValue('monaPerEth', convertToEth(monaPerEth)));\n      // } catch (e) {\n      //   console.error(e);\n      //   dispatch(this.setValue('monaPerEth', 1));\n      // }\n      try {\n        const {\n          digitalaxAuctionContracts\n        } = await api.getAuctionContracts();\n        const [{\n          minBidIncrement,\n          id,\n          bidWithdrawalLockTime\n        }] = digitalaxAuctionContracts;\n        dispatch(this.setValue('minBidIncrement', convertToEth(minBidIncrement)));\n        dispatch(this.setValue('auctionContractAddress', id));\n        dispatch(this.setValue('bidWithdrawalLockTime', bidWithdrawalLockTime));\n      } catch (e) {\n        // toast.error(`Set contract params error: ${JSON.stringify(e)}`);\n        console.error(e);\n      }\n    };\n  }\n\n  resetContratParams() {\n    return async dispatch => {\n      dispatch(this.setValue('minBidIncrement', 0));\n      dispatch(this.setValue('auctionContractAddress', null));\n      dispatch(this.setValue('bidWithdrawalLockTime', 0));\n    };\n  }\n\n  changeNetwork(chainId) {\n    return async dispatch => {\n      const url = getAPIUrlByChainId(chainId);\n      const wsUrl = getWSUrlByChainId(chainId);\n      api.setUrl(url);\n      ws.setUrl(wsUrl);\n      dispatch(this.setValue('chainId', chainId));\n    };\n  }\n\n  setMonaMaticBalance(value) {\n    return dispatch => {\n      dispatch(this.setValue('monaMaticBalance', value));\n    };\n  }\n\n  setMonaPerEth(value) {\n    return dispatch => {\n      dispatch(this.setValue('monaPerEth', value));\n    };\n  }\n\n  setMonaEthBalance(value) {\n    return dispatch => {\n      dispatch(this.setValue('monaEthBalance', value));\n    };\n  }\n\n  setIsLoading(value) {\n    return dispatch => {\n      dispatch(this.setValue('isLoading', value));\n    };\n  }\n\n  setDtxEthIds(values) {\n    return dispatch => {\n      dispatch(this.setValue('dtxEthIds', values));\n    };\n  }\n\n  setDtxMaticIds(values) {\n    return dispatch => {\n      dispatch(this.setValue('dtxMaticIds', values));\n    };\n  }\n\n  setEthNfts(values) {\n    return dispatch => {\n      dispatch(this.setValue('ethNfts', values));\n    };\n  }\n\n  setMaticNfts(values) {\n    return dispatch => {\n      dispatch(this.setValue('maticNfts', values));\n    };\n  }\n\n  setAllUsers(values) {\n    return dispatch => {\n      dispatch(this.setValue('allUsers', values));\n    };\n  }\n\n}\n\nexport default new GlobalActions(globalReducer);","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/actions/global.actions.js"],"names":["moment","Web3","BaseActions","toast","userActions","auctionActions","auctionPageActions","designerActions","designerPageActions","garmentActions","garmentPageActions","historyActions","globalReducer","isMetamaskInstalled","getRewardContractAddressByChainId","getMarketplaceContractAddressByChainId","getDefaultNetworkChainId","getEnabledNetworkByChainId","getAPIUrlByChainId","getWSUrlByChainId","getTokenPriceMatic","getMarketplaceContract","api","ws","convertToEth","STORAGE_IS_LOGGED_IN","STORAGE_WALLET","WALLET_METAMASK","WALLET_ARKANE","GlobalActions","initApp","dispatch","rateItem","getEthRate","setValue","ethereum","usd","e","error","JSON","stringify","localStorage","getItem","changeNetwork","setContractParams","console","log","window","web3","on","accounts","account","setItem","selectedAddress","chainId","clear","resetContratParams","getState","digitalaxAuctionContracts","getAuctionContracts","minBidIncrement","id","bidWithdrawalLockTime","url","wsUrl","setUrl","setMonaMaticBalance","value","setMonaPerEth","setMonaEthBalance","setIsLoading","setDtxEthIds","values","setDtxMaticIds","setEthNfts","setMaticNfts","setAllUsers"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport Web3 from 'web3';\nimport BaseActions from '@actions/base-actions';\nimport { toast } from 'react-toastify';\nimport userActions from '@actions/user.actions';\nimport auctionActions from '@actions/auction.actions';\nimport auctionPageActions from '@actions/auction.page.actions';\nimport designerActions from '@actions/designer.actions';\nimport designerPageActions from '@actions/designer.page.actions';\nimport garmentActions from '@actions/garment.actions';\nimport garmentPageActions from '@actions/garment.page.actions';\nimport historyActions from '@actions/history.actions';\nimport globalReducer from '@reducers/global.reducer';\nimport { isMetamaskInstalled } from '@services/metamask.service';\nimport {\n  getRewardContractAddressByChainId,\n  getMarketplaceContractAddressByChainId,\n  getDefaultNetworkChainId,\n  getEnabledNetworkByChainId,\n  getAPIUrlByChainId,\n  getWSUrlByChainId,\n} from '@services/network.service';\nimport { getTokenPriceMatic, getMarketplaceContract } from '@services/contract.service';\n\nimport api from '@services/api/api.service';\nimport ws from '@services/api/ws.service';\n\nimport { convertToEth } from '@helpers/price.helpers';\nimport { STORAGE_IS_LOGGED_IN, STORAGE_WALLET } from '@constants/storage.constants';\nimport { WALLET_METAMASK, WALLET_ARKANE } from '@constants/global.constants';\n\nclass GlobalActions extends BaseActions {\n  initApp() {\n    return async (dispatch) => {\n      /**\n       * Get eth/usd rate\n       */\n      try {\n        const rateItem = await api.getEthRate();\n        dispatch(this.setValue('exchangeRateETH', rateItem.ethereum.usd));\n      } catch (e) {\n        toast.error(`Set USD rate error: ${JSON.stringify(e)}`);\n      }\n\n      /**\n       * Check installed Metamask or \n      Check if Arkane loggedIn\n       */\n      if (\n        (localStorage.getItem(STORAGE_IS_LOGGED_IN) &&\n          localStorage.getItem(STORAGE_WALLET) === WALLET_ARKANE) ||\n        !isMetamaskInstalled()\n      ) {\n        dispatch(this.changeNetwork(getDefaultNetworkChainId()));\n        await dispatch(this.setContractParams());\n        dispatch(this.setValue('isInitialized', true));\n        console.log('METAMASK WAS NOT DETECTED ON init');\n        console.log('METAMASK WAS NOT DETECTED ON init');\n        return;\n      }\n      const { ethereum } = window;\n      window.web3 = new Web3(ethereum);\n      /**\n       * Init subscribers\n       */\n      ethereum.on('accountsChanged', (accounts) => {\n        const [account] = accounts;\n        if (localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n          dispatch(userActions.setValue('account', account || null));\n          localStorage.setItem(STORAGE_IS_LOGGED_IN, 1);\n        }\n      });\n\n      if (ethereum.selectedAddress && localStorage.getItem(STORAGE_IS_LOGGED_IN)) {\n        dispatch(userActions.setValue('account', ethereum.selectedAddress));\n      }\n\n      ethereum.on('chainChanged', async (chainId) => {\n        if (!chainId) {\n          return;\n        }\n\n        dispatch(auctionPageActions.clear());\n        dispatch(auctionActions.clear());\n        dispatch(historyActions.clear());\n        dispatch(garmentActions.clear());\n        dispatch(garmentPageActions.clear());\n        dispatch(designerPageActions.clear());\n        dispatch(designerActions.clear());\n\n        dispatch(this.resetContratParams());\n        dispatch(this.changeNetwork(chainId));\n\n        if (getEnabledNetworkByChainId(chainId)) {\n          await dispatch(this.setContractParams());\n        } else {\n          console.error('Wrong network. Contracts are not deployed yet');\n        }\n      });\n\n      dispatch(this.changeNetwork(ethereum.chainId));\n      await dispatch(this.setContractParams());\n      dispatch(this.setValue('isInitialized', true));\n    };\n  }\n\n  setContractParams() {\n    return async (dispatch, getState) => {\n      // try {\n      //   const monaPerEth = await getTokenPriceMatic();\n      //   dispatch(this.setValue('monaPerEth', convertToEth(monaPerEth)));\n      // } catch (e) {\n      //   console.error(e);\n      //   dispatch(this.setValue('monaPerEth', 1));\n      // }\n\n      try {\n        const { digitalaxAuctionContracts } = await api.getAuctionContracts();\n\n        const [{ minBidIncrement, id, bidWithdrawalLockTime }] = digitalaxAuctionContracts;\n\n        dispatch(this.setValue('minBidIncrement', convertToEth(minBidIncrement)));\n        dispatch(this.setValue('auctionContractAddress', id));\n        dispatch(this.setValue('bidWithdrawalLockTime', bidWithdrawalLockTime));\n      } catch (e) {\n        // toast.error(`Set contract params error: ${JSON.stringify(e)}`);\n        console.error(e);\n      }\n    };\n  }\n\n  resetContratParams() {\n    return async (dispatch) => {\n      dispatch(this.setValue('minBidIncrement', 0));\n      dispatch(this.setValue('auctionContractAddress', null));\n      dispatch(this.setValue('bidWithdrawalLockTime', 0));\n    };\n  }\n\n  changeNetwork(chainId) {\n    return async (dispatch) => {\n      const url = getAPIUrlByChainId(chainId);\n      const wsUrl = getWSUrlByChainId(chainId);\n\n      api.setUrl(url);\n      ws.setUrl(wsUrl);\n      dispatch(this.setValue('chainId', chainId));\n    };\n  }\n\n  setMonaMaticBalance(value) {\n    return (dispatch) => {\n      dispatch(this.setValue('monaMaticBalance', value));\n    };\n  }\n\n  setMonaPerEth(value) {\n    return (dispatch) => {\n      dispatch(this.setValue('monaPerEth', value));\n    };\n  }\n\n  setMonaEthBalance(value) {\n    return (dispatch) => {\n      dispatch(this.setValue('monaEthBalance', value));\n    };\n  }\n\n  setIsLoading(value) {\n    return (dispatch) => {\n      dispatch(this.setValue('isLoading', value));\n    };\n  }\n\n  setDtxEthIds(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('dtxEthIds', values));\n    };\n  }\n\n  setDtxMaticIds(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('dtxMaticIds', values));\n    };\n  }\n\n  setEthNfts(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('ethNfts', values));\n    };\n  }\n\n  setMaticNfts(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('maticNfts', values));\n    };\n  }\n\n  setAllUsers(values) {\n    return (dispatch) => {\n      dispatch(this.setValue('allUsers', values));\n    };\n  }\n}\n\nexport default new GlobalActions(globalReducer);\n"]},"metadata":{},"sourceType":"module"}