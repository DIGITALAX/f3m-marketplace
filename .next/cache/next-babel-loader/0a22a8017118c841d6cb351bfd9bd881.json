{"ast":null,"code":"import BaseActions from '@actions/base-actions';\nimport reducer from '../reducers/history.reducer';\nimport { COMMON_RARITY, SEMI_RARE_RARITY } from \"@constants/global.constants\";\n\nclass HistoryActions extends BaseActions {\n  mapData(digitalaxGarmentAuctionHistories) {\n    return async (dispatch, getState) => {\n      if (!digitalaxGarmentAuctionHistories.length) {\n        return;\n      }\n\n      const state = getState();\n      let historyByTokenId = state.history.get('historyByTokenId');\n      digitalaxGarmentAuctionHistories.forEach(itemHistory => {\n        const tokenId = itemHistory.token.id;\n\n        if (!historyByTokenId.get(tokenId)) {\n          historyByTokenId = historyByTokenId.set(tokenId, []);\n        }\n\n        const tokenArray = historyByTokenId.get(tokenId);\n\n        if (!tokenArray.find(item => item.id === itemHistory.id)) {\n          historyByTokenId = historyByTokenId.set(tokenId, [...tokenArray, itemHistory]);\n        }\n      });\n      dispatch(this.setValue('historyByTokenId', historyByTokenId));\n    };\n  }\n\n  updateMarketplaceHistories(digitalaxMarketplacePurchaseHistories) {\n    return async (dispatch, getState) => {\n      if (!digitalaxMarketplacePurchaseHistories.length) {\n        return;\n      }\n\n      const state = getState();\n      let commonHistoryByTokenId = state.history.get('commonHistoryByTokenId');\n      let semiRareHistoryByTokenId = state.history.get('semiRareHistoryByTokenId');\n      digitalaxMarketplacePurchaseHistories.forEach(itemHistory => {\n        const tokenId = itemHistory.garmentAuctionId;\n        const tx = itemHistory.transactionHash;\n\n        if (itemHistory.rarity === COMMON_RARITY) {\n          if (!commonHistoryByTokenId.get(tokenId)) {\n            commonHistoryByTokenId = commonHistoryByTokenId.set(tokenId, []);\n          }\n\n          const tokenArray = commonHistoryByTokenId.get(tokenId);\n\n          if (!tokenArray.find(item => item.transactionHash === tx)) {\n            commonHistoryByTokenId = commonHistoryByTokenId.set(tokenId, [...tokenArray, itemHistory]);\n          }\n        }\n\n        if (itemHistory.rarity === SEMI_RARE_RARITY) {\n          if (!semiRareHistoryByTokenId.get(tokenId)) {\n            semiRareHistoryByTokenId = semiRareHistoryByTokenId.set(tokenId, []);\n          }\n\n          const tokenArray1 = semiRareHistoryByTokenId.get(tokenId);\n\n          if (!tokenArray1.find(item => item.transactionHash === tx)) {\n            semiRareHistoryByTokenId = semiRareHistoryByTokenId.set(tokenId, [...tokenArray1, itemHistory]);\n          }\n        }\n      });\n      dispatch(this.setValue('commonHistoryByTokenId', commonHistoryByTokenId));\n      dispatch(this.setValue('semiRareHistoryByTokenId', semiRareHistoryByTokenId));\n    };\n  }\n\n}\n\nexport default new HistoryActions(reducer);","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/actions/history.actions.js"],"names":["BaseActions","reducer","COMMON_RARITY","SEMI_RARE_RARITY","HistoryActions","mapData","digitalaxGarmentAuctionHistories","dispatch","getState","length","state","historyByTokenId","history","get","forEach","itemHistory","tokenId","token","id","set","tokenArray","find","item","setValue","updateMarketplaceHistories","digitalaxMarketplacePurchaseHistories","commonHistoryByTokenId","semiRareHistoryByTokenId","garmentAuctionId","tx","transactionHash","rarity","tokenArray1"],"mappings":"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","sourcesContent":["import BaseActions from '@actions/base-actions';\nimport reducer from '../reducers/history.reducer';\nimport {COMMON_RARITY, SEMI_RARE_RARITY} from \"@constants/global.constants\"\n\nclass HistoryActions extends BaseActions {\n\n  mapData(digitalaxGarmentAuctionHistories) {\n    return async (dispatch, getState) => {\n\n      if (!digitalaxGarmentAuctionHistories.length) {\n        return;\n      }\n\n      const state = getState();\n\n      let historyByTokenId = state.history.get('historyByTokenId');\n\n      digitalaxGarmentAuctionHistories.forEach((itemHistory) => {\n        const tokenId = itemHistory.token.id;\n        if (!historyByTokenId.get(tokenId)) {\n          historyByTokenId = historyByTokenId.set(tokenId, []);\n        }\n        const tokenArray = historyByTokenId.get(tokenId);\n\n        if (!tokenArray.find((item) => item.id === itemHistory.id)) {\n          historyByTokenId = historyByTokenId.set(tokenId, [...tokenArray, itemHistory]);\n        }\n\n      });\n\n      dispatch(this.setValue('historyByTokenId', historyByTokenId));\n\n    };\n  }\n\n  updateMarketplaceHistories(digitalaxMarketplacePurchaseHistories) {\n    return async (dispatch, getState) => {\n\n      if (!digitalaxMarketplacePurchaseHistories.length) {\n        return;\n      }\n\n      const state = getState();\n\n      let commonHistoryByTokenId = state.history.get('commonHistoryByTokenId');\n      let semiRareHistoryByTokenId = state.history.get('semiRareHistoryByTokenId');\n\n      digitalaxMarketplacePurchaseHistories.forEach((itemHistory) => {\n        const tokenId = itemHistory.garmentAuctionId;\n        const tx = itemHistory.transactionHash;\n\n        if (itemHistory.rarity === COMMON_RARITY) {\n          if (!commonHistoryByTokenId.get(tokenId)) {\n            commonHistoryByTokenId = commonHistoryByTokenId.set(tokenId, []);\n          }\n          const tokenArray = commonHistoryByTokenId.get(tokenId);\n\n          if (!tokenArray.find((item) => item.transactionHash === tx)) {\n            commonHistoryByTokenId = commonHistoryByTokenId.set(tokenId, [...tokenArray, itemHistory]);\n          }\n        }\n\n        if (itemHistory.rarity === SEMI_RARE_RARITY) {\n          if (!semiRareHistoryByTokenId.get(tokenId)) {\n            semiRareHistoryByTokenId = semiRareHistoryByTokenId.set(tokenId, []);\n          }\n          const tokenArray1 = semiRareHistoryByTokenId.get(tokenId);\n\n          if (!tokenArray1.find((item) => item.transactionHash === tx)) {\n            semiRareHistoryByTokenId = semiRareHistoryByTokenId.set(tokenId, [...tokenArray1, itemHistory]);\n          }\n        }\n      });\n\n      dispatch(this.setValue('commonHistoryByTokenId', commonHistoryByTokenId));\n      dispatch(this.setValue('semiRareHistoryByTokenId', semiRareHistoryByTokenId));\n\n    };\n  }\n\n}\n\nexport default new HistoryActions(reducer);\n"]},"metadata":{},"sourceType":"module"}