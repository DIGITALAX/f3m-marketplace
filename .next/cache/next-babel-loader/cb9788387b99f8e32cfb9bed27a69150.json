{"ast":null,"code":"import { STAGE_ESPA_BACKEND_URL } from \"@constants/global.constants\";\nimport { get, post, put } from \"@utils/api\";\nimport axios from \"axios\";\n\nclass EspaApiService {\n  constructor() {\n    this.url = STAGE_ESPA_BACKEND_URL;\n  }\n\n  setUrl(url) {\n    this.url = url;\n  }\n\n  async handleSignUp(account, userName, email, ip) {\n    try {\n      const message = await post(\"/register\", {\n        wallet: account,\n        username: userName,\n        email,\n        ipAddrs: ip\n      });\n      return message;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async fetchAuthToken(account) {\n    try {\n      const data = await post(\"/account-exists\", {\n        wallet: account\n      });\n\n      if (data === 0) {\n        return \"\";\n      }\n\n      return data;\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  async handleAuthentication(account, signMsg, signature) {\n    try {\n      const data = await post(\"/authenticate\", {\n        wallet: account,\n        randomString: signMsg,\n        signature\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async checkUserName(username) {\n    try {\n      const isExist = await get(\"/username-available\", {\n        username\n      });\n      return isExist | 0;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async fetchNfts(account) {\n    try {\n      const ntfs = await get(\"/get-nfts\", {\n        wallet: account\n      });\n      return ntfs;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getProfile() {\n    try {\n      const user = await get(\"/profile\");\n      return user;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async updateProfile(user) {\n    try {\n      const data = await put(\"/profile\", user);\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getPresignedUrl() {\n    try {\n      const data = await get(\"/presigned-url\");\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async uploadImageToS3(url, file) {\n    try {\n      await axios.put(url, file, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async getMyIP() {\n    try {\n      const url = \"https://api.ipify.org/?format=json\";\n      const {\n        data\n      } = await axios.get(url);\n      return data.ip;\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  async getViews(viewsType, viewsId) {\n    try {\n      const views = await get(\"/get-views-by-id\", {\n        viewsType,\n        viewsId\n      });\n      return views;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getAllUsersName() {\n    try {\n      const allUsers = await get(\"/get-all-users-name\");\n      return allUsers;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async addLove(account, signMsg, viewsType, viewsId) {\n    try {\n      const data = await post(\"/add-love\", {\n        wallet: account,\n        randomString: signMsg,\n        viewsType,\n        viewsId\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getUserByWalletAddress(wallet) {\n    try {\n      const data = await get(\"/get-user-by-wallet\", {\n        wallet\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getDesignerById(id) {\n    try {\n      const data = await get(\"/get-designer-by-id\", {\n        designerId: id\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getModelById(id) {\n    try {\n      const data = await get(\"/get-model-by-id\", {\n        modelId: id\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async addView(viewsType, viewsId) {\n    try {\n      const data = await post(\"/add-view\", {\n        viewsType,\n        viewsId\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getSourceType(name) {\n    try {\n      const data = await get(\"/get-fashion-by-item-name\", {\n        name\n      });\n      return data[0];\n    } catch (e) {\n      throw e;\n    }\n  }\n\n}\n\nexport default new EspaApiService();","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/services/api/espa/api.service.js"],"names":["STAGE_ESPA_BACKEND_URL","get","post","put","axios","EspaApiService","constructor","url","setUrl","handleSignUp","account","userName","email","ip","message","wallet","username","ipAddrs","e","fetchAuthToken","data","handleAuthentication","signMsg","signature","randomString","checkUserName","isExist","fetchNfts","ntfs","getProfile","user","updateProfile","getPresignedUrl","uploadImageToS3","file","headers","getMyIP","getViews","viewsType","viewsId","views","getAllUsersName","allUsers","addLove","getUserByWalletAddress","getDesignerById","id","designerId","getModelById","modelId","addView","getSourceType","name"],"mappings":"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","sourcesContent":["import { STAGE_ESPA_BACKEND_URL } from \"@constants/global.constants\";\nimport { get, post, put } from \"@utils/api\";\nimport axios from \"axios\";\n\nclass EspaApiService {\n  constructor() {\n    this.url = STAGE_ESPA_BACKEND_URL;\n  }\n\n  setUrl(url) {\n    this.url = url;\n  }\n\n  async handleSignUp(account, userName, email, ip) {\n    try {\n      const message = await post(\"/register\", {\n        wallet: account,\n        username: userName,\n        email,\n        ipAddrs: ip,\n      });\n      return message;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async fetchAuthToken(account) {\n    try {\n      const data = await post(\"/account-exists\", {\n        wallet: account,\n      });\n      if (data === 0) {\n        return \"\";\n      }\n      return data;\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  async handleAuthentication(account, signMsg, signature) {\n    try {\n      const data = await post(\"/authenticate\", {\n        wallet: account,\n        randomString: signMsg,\n        signature,\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async checkUserName(username) {\n    try {\n      const isExist = await get(\"/username-available\", {\n        username,\n      });\n      return isExist | 0;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async fetchNfts(account) {\n    try {\n      const ntfs = await get(\"/get-nfts\", {\n        wallet: account,\n      });\n      return ntfs;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getProfile() {\n    try {\n      const user = await get(\"/profile\");\n      return user;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async updateProfile(user) {\n    try {\n      const data = await put(\"/profile\", user);\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getPresignedUrl() {\n    try {\n      const data = await get(\"/presigned-url\");\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async uploadImageToS3(url, file) {\n    try {\n      await axios.put(url, file, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  async getMyIP() {\n    try {\n      const url = \"https://api.ipify.org/?format=json\";\n      const { data } = await axios.get(url);\n      return data.ip;\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  async getViews(viewsType, viewsId) {\n    try {\n      const views = await get(\"/get-views-by-id\", {\n        viewsType,\n        viewsId,\n      });\n      return views;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getAllUsersName() {\n    try {\n      const allUsers = await get(\"/get-all-users-name\");\n      return allUsers;\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async addLove(account, signMsg, viewsType, viewsId) {\n    try {\n      const data = await post(\"/add-love\", {\n        wallet: account,\n        randomString: signMsg,\n        viewsType,\n        viewsId,\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getUserByWalletAddress(wallet) {\n    try {\n      const data = await get(\"/get-user-by-wallet\", { wallet });\n\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getDesignerById(id) {\n    try {\n      const data = await get(\"/get-designer-by-id\", { designerId: id });\n\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getModelById(id) {\n    try {\n      const data = await get(\"/get-model-by-id\", { modelId: id });\n\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async addView(viewsType, viewsId) {\n    try {\n      const data = await post(\"/add-view\", {\n        viewsType,\n        viewsId,\n      });\n      return data;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async getSourceType(name) {\n    try {\n      const data = await get(`/get-fashion-by-item-name`, { name });\n      return data[0];\n    } catch (e) {\n      throw e;\n    }\n  }\n}\n\nexport default new EspaApiService();\n"]},"metadata":{},"sourceType":"module"}