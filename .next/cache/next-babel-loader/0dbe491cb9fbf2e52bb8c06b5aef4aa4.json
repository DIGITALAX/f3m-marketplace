{"ast":null,"code":"import { fromJS } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { propCheck } from 'redux-modules-middleware';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst TransformModules = defaultFields => ({\n  setValue: {\n    reducer: (state, {\n      payload\n    }) => {\n      // debugger;\n      state = state.set(payload.field, payload.value);\n      return state;\n    }\n  },\n  set: {\n    middleware: [propCheck({\n      field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n      value: PropTypes.any,\n      isFromJS: PropTypes.bool\n    })],\n    reducer: (state, {\n      payload\n    }) => {\n      if (Array.isArray(payload.field)) {\n        state = state.setIn(payload.field, payload.isFromJS ? fromJS(payload.value) : payload.value);\n      } else {\n        state = state.set(payload.field, payload.isFromJS ? fromJS(payload.value) : payload.value);\n      }\n\n      return state;\n    }\n  },\n  setIn: {\n    reducer: (state, {\n      payload\n    }) => {\n      Object.keys(payload.params).forEach(field => {\n        state = state.setIn([payload.field, field], payload.params[field]);\n      });\n      return state;\n    }\n  },\n  setMultiple: {\n    reducer: (state, {\n      payload\n    }) => {\n      Object.keys(payload).forEach(field => {\n        state = state.setIn(field.toString().split('.'), payload[field]);\n      });\n      return state;\n    }\n  },\n  clear: {\n    reducer: () => cloneDeep(defaultFields)\n  },\n  clearByField: {\n    middleware: [propCheck({\n      field: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\n    })],\n    reducer: (state, {\n      payload\n    }) => {\n      state = state.set(payload.field, cloneDeep(defaultFields.get(payload.field)));\n      return state;\n    }\n  }\n});\n\nexport default TransformModules;","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/utils/transform-modules.js"],"names":["fromJS","PropTypes","propCheck","cloneDeep","TransformModules","defaultFields","setValue","reducer","state","payload","set","field","value","middleware","oneOfType","string","array","any","isFromJS","bool","Array","isArray","setIn","Object","keys","params","forEach","setMultiple","toString","split","clear","clearByField","get"],"mappings":"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","sourcesContent":["import { fromJS } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { propCheck } from 'redux-modules-middleware';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst TransformModules = (defaultFields) => ({\n  setValue: {\n    reducer: (state, { payload }) => {\n      // debugger;\n      state = state.set(payload.field, payload.value);\n      return state;\n    },\n  },\n  set: {\n    middleware: [\n      propCheck({\n        field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n        value: PropTypes.any,\n        isFromJS: PropTypes.bool,\n      }),\n    ],\n    reducer: (state, { payload }) => {\n      if (Array.isArray(payload.field)) {\n        state = state.setIn(payload.field, payload.isFromJS ? fromJS(payload.value) : payload.value);\n      } else {\n        state = state.set(payload.field, payload.isFromJS ? fromJS(payload.value) : payload.value);\n      }\n      return state;\n    },\n  },\n  setIn: {\n    reducer: (state, { payload }) => {\n      Object.keys(payload.params).forEach((field) => {\n        state = state.setIn([payload.field, field], payload.params[field]);\n      });\n\n      return state;\n    },\n  },\n  setMultiple: {\n    reducer: (state, { payload }) => {\n      Object.keys(payload).forEach((field) => {\n        state = state.setIn(field.toString().split('.'), payload[field]);\n      });\n      return state;\n    },\n  },\n  clear: {\n    reducer: () => cloneDeep(defaultFields),\n  },\n  clearByField: {\n    middleware: [\n      propCheck({\n        field: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n      }),\n    ],\n    reducer: (state, { payload }) => {\n      state = state.set(payload.field, cloneDeep(defaultFields.get(payload.field)));\n      return state;\n    },\n  },\n});\n\nexport default TransformModules;\n"]},"metadata":{},"sourceType":"module"}