{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/modal-withdraw-bid/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { memo, useRef, useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\nimport Button from '@components/buttons/button';\nimport Modal from '@components/modal';\nimport { closeWithdrawModal } from '@actions/modals.actions';\nimport bidActions from '@actions/bid.actions';\nimport { getModalParams } from '@selectors/modal.selectors';\nimport { getMonaPerEth, getChainId } from '@selectors/global.selectors';\nimport styles from './styles.module.scss';\n\nconst ModalWithdrawBid = ({\n  className,\n  title,\n  text,\n  yourBidText,\n  buttonText\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const requests = useRef([]);\n  const {\n    0: showError,\n    1: setShowError\n  } = useState(null);\n  const {\n    id,\n    withdrawValue\n  } = useSelector(getModalParams);\n  const {\n    0: isDisabled,\n    1: setIsDisabled\n  } = useState(false);\n  const monaPerEth = useSelector(getMonaPerEth);\n  const chainId = useSelector(getChainId);\n  const isMatic = chainId === '0x13881' || chainId === '0x89';\n\n  const handleClose = () => {\n    dispatch(closeWithdrawModal());\n  };\n\n  const handleClick = () => {\n    setShowError(null);\n    setIsDisabled(true);\n    dispatch(bidActions.withdraw(id, withdrawValue)).then(request => {\n      requests.current.push(request);\n      request.promise.then(() => handleClose()).catch(e => {\n        setShowError(e.message);\n        setIsDisabled(false);\n      });\n    });\n  };\n\n  useEffect(() => () => {\n    requests.current.forEach(request => request.unsubscribe());\n    requests.current = [];\n  }, []);\n  return __jsx(React.Fragment, null, /*#__PURE__*/createPortal(__jsx(Modal, {\n    className: cn(styles.modal, className),\n    onClose: () => handleClose(),\n    title: title,\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styles.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    isDisabled: isDisabled || !isMatic,\n    className: styles.button,\n    background: \"black\",\n    onClick: () => handleClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, buttonText), __jsx(\"p\", {\n    className: styles.caption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, yourBidText), __jsx(\"p\", {\n    className: styles.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, withdrawValue, \" MONA\")), showError && __jsx(\"p\", {\n    className: styles.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  }, showError)), document.body));\n};\n\n_s(ModalWithdrawBid, \"S+HZnf48kzkdxawIriDLbp5fnO8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ModalWithdrawBid;\nModalWithdrawBid.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n  text: PropTypes.array,\n  yourBidText: PropTypes.string,\n  buttonText: PropTypes.string\n};\nModalWithdrawBid.defaultProps = {\n  className: '',\n  title: 'Withdraw a Bid',\n  text: ['Your MONA will be withdrawn and your bid will no longer be active. You can place a new bid at anytime before the auction ends.'],\n  yourBidText: 'Your Bid:',\n  buttonText: 'WITHDRAW BID'\n};\nexport default _c2 = /*#__PURE__*/memo(ModalWithdrawBid);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModalWithdrawBid\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/modal-withdraw-bid/index.js"],"names":["React","memo","useRef","useState","useEffect","createPortal","PropTypes","useDispatch","useSelector","cn","Button","Modal","closeWithdrawModal","bidActions","getModalParams","getMonaPerEth","getChainId","styles","ModalWithdrawBid","className","title","text","yourBidText","buttonText","dispatch","requests","showError","setShowError","id","withdrawValue","isDisabled","setIsDisabled","monaPerEth","chainId","isMatic","handleClose","handleClick","withdraw","then","request","current","push","promise","catch","e","message","forEach","unsubscribe","modal","footer","button","caption","value","error","document","body","propTypes","string","array","defaultProps"],"mappings":"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","sourcesContent":["import React, { memo, useRef, useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\nimport Button from '@components/buttons/button';\nimport Modal from '@components/modal';\nimport { closeWithdrawModal } from '@actions/modals.actions';\nimport bidActions from '@actions/bid.actions';\nimport { getModalParams } from '@selectors/modal.selectors';\nimport { getMonaPerEth, getChainId } from '@selectors/global.selectors';\nimport styles from './styles.module.scss';\n\nconst ModalWithdrawBid = ({ className, title, text, yourBidText, buttonText }) => {\n  const dispatch = useDispatch();\n  const requests = useRef([]);\n  const [showError, setShowError] = useState(null);\n  const { id, withdrawValue } = useSelector(getModalParams);\n  const [isDisabled, setIsDisabled] = useState(false);\n  const monaPerEth = useSelector(getMonaPerEth);\n  const chainId = useSelector(getChainId);\n  const isMatic = chainId === '0x13881' || chainId === '0x89';\n\n  const handleClose = () => {\n    dispatch(closeWithdrawModal());\n  };\n\n  const handleClick = () => {\n    setShowError(null);\n    setIsDisabled(true);\n    dispatch(bidActions.withdraw(id, withdrawValue)).then((request) => {\n      requests.current.push(request);\n      request.promise\n        .then(() => handleClose())\n        .catch((e) => {\n          setShowError(e.message);\n          setIsDisabled(false);\n        });\n    });\n  };\n\n  useEffect(\n    () => () => {\n      requests.current.forEach((request) => request.unsubscribe());\n      requests.current = [];\n    },\n    []\n  );\n\n  return (\n    <>\n      {createPortal(\n        <Modal\n          className={cn(styles.modal, className)}\n          onClose={() => handleClose()}\n          title={title}\n          text={text}\n        >\n          <div className={styles.footer}>\n            <Button\n              isDisabled={isDisabled || !isMatic}\n              className={styles.button}\n              background=\"black\"\n              onClick={() => handleClick()}\n            >\n              {buttonText}\n            </Button>\n            <p className={styles.caption}>{yourBidText}</p>\n            <p className={styles.value}>{withdrawValue} MONA</p>\n          </div>\n          {showError && <p className={styles.error}>{showError}</p>}\n        </Modal>,\n        document.body\n      )}\n    </>\n  );\n};\n\nModalWithdrawBid.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n  text: PropTypes.array,\n  yourBidText: PropTypes.string,\n  buttonText: PropTypes.string,\n};\n\nModalWithdrawBid.defaultProps = {\n  className: '',\n  title: 'Withdraw a Bid',\n  text: [\n    'Your MONA will be withdrawn and your bid will no longer be active. You can place a new bid at anytime before the auction ends.',\n  ],\n  yourBidText: 'Your Bid:',\n  buttonText: 'WITHDRAW BID',\n};\n\nexport default memo(ModalWithdrawBid);\n"]},"metadata":{},"sourceType":"module"}