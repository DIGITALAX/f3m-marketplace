{"ast":null,"code":"/**\n * Base actions for work with store by selected reducer\n */\nexport default class BaseActions {\n  /** Select reducer\n  * @constructor\n  * @param reducer\n  */\n  constructor(reducer) {\n    this.reducer = reducer;\n  }\n  /**\n  * Set value to reducer\n  * @param {string|array} field\n  * @param {any} value\n  * @param {boolean} [isFromJS]\n  * @returns {function}\n  */\n\n\n  setValue(field, value, isFromJS = true) {\n    return this.callAction('set', {\n      field,\n      value,\n      isFromJS\n    });\n  }\n  /**\n  * Set multiple values\n  * @param {Object} payload\n  * @returns {Function}\n  */\n\n\n  setMultipleValue(payload) {\n    return this.callAction('setMultiple', payload);\n  }\n  /**\n   * set in\n   * @param {string} field\n   * @param {string} params\n   * @return {function(...[*]=)}\n   */\n\n\n  setIn(field, params) {\n    return this.callAction('setIn', {\n      field,\n      params\n    });\n  }\n  /**\n  * Reset reducer to default values\n  * @returns {Function}\n  */\n\n\n  clear() {\n    return this.callAction('clear');\n  }\n  /**\n  * Reset only one field in reducer to default values\n  * @param {String} field\n  * @returns {Function}\n  */\n\n\n  clearByField(field) {\n    return this.callAction('clearByField', {\n      field\n    });\n  }\n  /**\n  * Is exist reducer\n  * @returns {boolean}\n  * @private\n  */\n\n\n  isExistReducer() {\n    return !!this.reducer || !!this.reducer.actions;\n  }\n  /**\n  * Is exist called reducer action\n  * @param {String} name\n  * @returns {boolean}\n  * @private\n  */\n\n\n  isExistAction(name) {\n    return !!this.reducer.actions[name];\n  }\n  /**\n  * Call reducer action\n  * @param {String} action\n  * @param payload\n  * @returns {Function}\n  * @private\n  */\n\n\n  callAction(action, payload = undefined) {\n    if (!this.isExistReducer()) {\n      throw new Error('Reducer not found');\n    }\n\n    if (!this.isExistAction(action)) {\n      throw new Error(`Action \"${action}\" in reducer not found`);\n    }\n\n    return dispatch => {\n      dispatch(this.reducer.actions[action](payload));\n    };\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/actions/base-actions.js"],"names":["BaseActions","constructor","reducer","setValue","field","value","isFromJS","callAction","setMultipleValue","payload","setIn","params","clear","clearByField","isExistReducer","actions","isExistAction","name","action","undefined","Error","dispatch"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,MAAMA,WAAN,CAAkB;AAE/B;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAeC,QAAQ,GAAG,IAA1B,EAAgC;AACtC,WAAO,KAAKC,UAAL,CAAgB,KAAhB,EAAuB;AAAEH,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAvB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,gBAAgB,CAACC,OAAD,EAAU;AACxB,WAAO,KAAKF,UAAL,CAAgB,aAAhB,EAA+BE,OAA/B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACN,KAAD,EAAQO,MAAR,EAAgB;AACnB,WAAO,KAAKJ,UAAL,CAAgB,OAAhB,EAAyB;AAAEH,MAAAA,KAAF;AAASO,MAAAA;AAAT,KAAzB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKL,UAAL,CAAgB,OAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEM,EAAAA,YAAY,CAACT,KAAD,EAAQ;AAClB,WAAO,KAAKG,UAAL,CAAgB,cAAhB,EAAgC;AAAEH,MAAAA;AAAF,KAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEU,EAAAA,cAAc,GAAG;AACf,WAAO,CAAC,CAAC,KAAKZ,OAAP,IAAkB,CAAC,CAAC,KAAKA,OAAL,CAAaa,OAAxC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,CAACC,IAAD,EAAO;AAClB,WAAO,CAAC,CAAC,KAAKf,OAAL,CAAaa,OAAb,CAAqBE,IAArB,CAAT;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEV,EAAAA,UAAU,CAACW,MAAD,EAAST,OAAO,GAAGU,SAAnB,EAA8B;AACtC,QAAI,CAAC,KAAKL,cAAL,EAAL,EAA4B;AAC1B,YAAM,IAAIM,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,QAAI,CAAC,KAAKJ,aAAL,CAAmBE,MAAnB,CAAL,EAAiC;AAC/B,YAAM,IAAIE,KAAJ,CAAW,WAAUF,MAAO,wBAA5B,CAAN;AACD;;AACD,WAAQG,QAAD,IAAc;AACnBA,MAAAA,QAAQ,CAAC,KAAKnB,OAAL,CAAaa,OAAb,CAAqBG,MAArB,EAA6BT,OAA7B,CAAD,CAAR;AACD,KAFD;AAGD;;AA7F8B","sourcesContent":["/**\n * Base actions for work with store by selected reducer\n */\nexport default class BaseActions {\n\n  /** Select reducer\n  * @constructor\n  * @param reducer\n  */\n  constructor(reducer) {\n    this.reducer = reducer;\n  }\n\n  /**\n  * Set value to reducer\n  * @param {string|array} field\n  * @param {any} value\n  * @param {boolean} [isFromJS]\n  * @returns {function}\n  */\n  setValue(field, value, isFromJS = true) {\n    return this.callAction('set', { field, value, isFromJS });\n  }\n\n  /**\n  * Set multiple values\n  * @param {Object} payload\n  * @returns {Function}\n  */\n  setMultipleValue(payload) {\n    return this.callAction('setMultiple', payload);\n  }\n\n  /**\n   * set in\n   * @param {string} field\n   * @param {string} params\n   * @return {function(...[*]=)}\n   */\n  setIn(field, params) {\n    return this.callAction('setIn', { field, params });\n  }\n\n  /**\n  * Reset reducer to default values\n  * @returns {Function}\n  */\n  clear() {\n    return this.callAction('clear');\n  }\n\n  /**\n  * Reset only one field in reducer to default values\n  * @param {String} field\n  * @returns {Function}\n  */\n  clearByField(field) {\n    return this.callAction('clearByField', { field });\n  }\n\n  /**\n  * Is exist reducer\n  * @returns {boolean}\n  * @private\n  */\n  isExistReducer() {\n    return !!this.reducer || !!this.reducer.actions;\n  }\n\n  /**\n  * Is exist called reducer action\n  * @param {String} name\n  * @returns {boolean}\n  * @private\n  */\n  isExistAction(name) {\n    return !!this.reducer.actions[name];\n  }\n\n  /**\n  * Call reducer action\n  * @param {String} action\n  * @param payload\n  * @returns {Function}\n  * @private\n  */\n  callAction(action, payload = undefined) {\n    if (!this.isExistReducer()) {\n      throw new Error('Reducer not found');\n    }\n    if (!this.isExistAction(action)) {\n      throw new Error(`Action \"${action}\" in reducer not found`);\n    }\n    return (dispatch) => {\n      dispatch(this.reducer.actions[action](payload));\n    };\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}