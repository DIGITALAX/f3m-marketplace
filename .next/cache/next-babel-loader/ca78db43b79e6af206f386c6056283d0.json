{"ast":null,"code":"import { AVAILABLE_NETWORKS } from '@constants/networks.constants';\nimport config from '@utils/config';\nexport const getEnabledNetworks = () => AVAILABLE_NETWORKS.filter(network => config.NETWORKS.includes(network.alias));\nexport const getEnabledNetworkByChainId = chainId => getEnabledNetworks().find(network => Number(network.hex) === Number(chainId));\nexport const requestSwitchNetwork = () => {\n  window.ethereum.request({\n    method: 'wallet_addEthereumChain',\n    params: [{\n      chainId: '0x89',\n      chainName: 'Matic Main Network',\n      rpcUrls: ['https://matic-mainnet.chainstacklabs.com'],\n      blockExplorerUrls: ['https://explorer-mainnet.maticvigil.com']\n    }]\n  }).then(res => {\n    console.log(res);\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getAPIUrlByChainId = chainId => {\n  if (Number(chainId) == 1) {\n    return config.API_URLS['mainnet'];\n  }\n\n  return config.API_URLS['matic'];\n};\nexport const getExplorerUrlByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.EXPLORER_URLS[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getDefaultNetworkChainId = () => {\n  const network = AVAILABLE_NETWORKS.find(net => net.alias === config.DEFAULT_NETWORK);\n\n  if (!network) {\n    throw new Error('Invalid DEFAULT_NETWORK: getDefaultNetworkChainId');\n  }\n\n  return network.hex;\n};\nexport const getWSUrlByChainId = chainId => {\n  const url = getAPIUrlByChainId(chainId);\n\n  if (!url) {\n    throw new Error('Invalid chainId: getWSUrlByChainId');\n  }\n\n  return url.replace('http', 'ws');\n};\nexport const getRewardContractAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.REWARD_CONTRACT_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getMonaContractAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.MONA_TOKEN_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getUSDTAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.USDT_ADDRESS[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getDTXAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.DTX_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getDTXV1AddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.DTXV1_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getDigiMaterialV2AddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.DIGI_MATERIALS_V2[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getDigiRootTunnelAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.ROOT_TUNNEL_ADDRESS[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getUpgraderAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.UPGRADER_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getMarketplaceContractAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.DIGITAL_MARKETPLACE_ADDRESSES[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getRootTunnelAddressV2ByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.ROOT_TUNNEL_V2_ADDRESS[network === null || network === void 0 ? void 0 : network.alias];\n};\nexport const getChildTunnelAddressV2ByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.CHILD_TUNNEL_V2_ADDRESS[network.alias];\n};\nexport const getSecondaryMarketplaceAddressByChainId = chainId => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.SECONDARY_MARKETPLACE_ADDRESS[network.alias];\n};","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/services/network.service.js"],"names":["AVAILABLE_NETWORKS","config","getEnabledNetworks","filter","network","NETWORKS","includes","alias","getEnabledNetworkByChainId","chainId","find","Number","hex","requestSwitchNetwork","window","ethereum","request","method","params","chainName","rpcUrls","blockExplorerUrls","then","res","console","log","catch","err","getAPIUrlByChainId","API_URLS","getExplorerUrlByChainId","EXPLORER_URLS","getDefaultNetworkChainId","net","DEFAULT_NETWORK","Error","getWSUrlByChainId","url","replace","getRewardContractAddressByChainId","REWARD_CONTRACT_ADDRESSES","getMonaContractAddressByChainId","MONA_TOKEN_ADDRESSES","getUSDTAddressByChainId","USDT_ADDRESS","getDTXAddressByChainId","DTX_ADDRESSES","getDTXV1AddressByChainId","DTXV1_ADDRESSES","getDigiMaterialV2AddressByChainId","DIGI_MATERIALS_V2","getDigiRootTunnelAddressByChainId","ROOT_TUNNEL_ADDRESS","getUpgraderAddressByChainId","UPGRADER_ADDRESSES","getMarketplaceContractAddressByChainId","DIGITAL_MARKETPLACE_ADDRESSES","getRootTunnelAddressV2ByChainId","ROOT_TUNNEL_V2_ADDRESS","getChildTunnelAddressV2ByChainId","CHILD_TUNNEL_V2_ADDRESS","getSecondaryMarketplaceAddressByChainId","SECONDARY_MARKETPLACE_ADDRESS"],"mappings":"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","sourcesContent":["import { AVAILABLE_NETWORKS } from '@constants/networks.constants';\nimport config from '@utils/config';\n\nexport const getEnabledNetworks = () =>\n  AVAILABLE_NETWORKS.filter((network) => config.NETWORKS.includes(network.alias));\n\nexport const getEnabledNetworkByChainId = (chainId) =>\n  getEnabledNetworks().find((network) => Number(network.hex) === Number(chainId));\nexport const requestSwitchNetwork = () => {\n  window.ethereum\n    .request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: '0x89',\n          chainName: 'Matic Main Network',\n          rpcUrls: ['https://matic-mainnet.chainstacklabs.com'],\n          blockExplorerUrls: ['https://explorer-mainnet.maticvigil.com'],\n        },\n      ],\n    })\n    .then((res) => {\n      console.log(res);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n\nexport const getAPIUrlByChainId = (chainId) => {\n  if (Number(chainId) == 1) {\n    return config.API_URLS['mainnet'];\n  }\n  return config.API_URLS['matic'];\n};\n\nexport const getExplorerUrlByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n  return config.EXPLORER_URLS[network?.alias];\n};\n\nexport const getDefaultNetworkChainId = () => {\n  const network = AVAILABLE_NETWORKS.find((net) => net.alias === config.DEFAULT_NETWORK);\n\n  if (!network) {\n    throw new Error('Invalid DEFAULT_NETWORK: getDefaultNetworkChainId');\n  }\n\n  return network.hex;\n};\n\nexport const getWSUrlByChainId = (chainId) => {\n  const url = getAPIUrlByChainId(chainId);\n\n  if (!url) {\n    throw new Error('Invalid chainId: getWSUrlByChainId');\n  }\n\n  return url.replace('http', 'ws');\n};\nexport const getRewardContractAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.REWARD_CONTRACT_ADDRESSES[network?.alias];\n};\n\nexport const getMonaContractAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.MONA_TOKEN_ADDRESSES[network?.alias];\n};\n\nexport const getUSDTAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.USDT_ADDRESS[network?.alias];\n};\n\nexport const getDTXAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.DTX_ADDRESSES[network?.alias];\n};\n\nexport const getDTXV1AddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.DTXV1_ADDRESSES[network?.alias];\n};\n\nexport const getDigiMaterialV2AddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.DIGI_MATERIALS_V2[network?.alias];\n};\n\nexport const getDigiRootTunnelAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.ROOT_TUNNEL_ADDRESS[network?.alias];\n};\n\nexport const getUpgraderAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.UPGRADER_ADDRESSES[network?.alias];\n};\n\nexport const getMarketplaceContractAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.DIGITAL_MARKETPLACE_ADDRESSES[network?.alias];\n};\n\nexport const getRootTunnelAddressV2ByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.ROOT_TUNNEL_V2_ADDRESS[network?.alias];\n};\n\nexport const getChildTunnelAddressV2ByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.CHILD_TUNNEL_V2_ADDRESS[network.alias];\n};\n\nexport const getSecondaryMarketplaceAddressByChainId = (chainId) => {\n  const network = getEnabledNetworkByChainId(chainId);\n\n  return config.SECONDARY_MARKETPLACE_ADDRESS[network.alias];\n};\n"]},"metadata":{},"sourceType":"module"}