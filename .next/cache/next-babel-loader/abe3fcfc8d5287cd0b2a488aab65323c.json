{"ast":null,"code":"import BaseActions from \"@actions/base-actions\";\nimport { utils as ethersUtils, constants, BigNumber } from \"ethers\";\nimport { utils } from \"web3\";\nimport config from \"@utils/config\";\nimport { convertToWei } from \"@helpers/price.helpers\";\nimport { getEnabledNetworkByChainId, getMarketplaceContractAddressByChainId, getMonaContractAddressByChainId, getSecondaryMarketplaceAddressByChainId } from \"@services/network.service\";\nimport auctionReducer from \"../reducers/auction.reducer\";\nimport { getContract, getMarketplaceContract, getMonaTokenContract, getERC721Contract, getSecondaryMarketplaceContract } from \"../services/contract.service\";\n\nclass BidActions extends BaseActions {\n  bid(id, value, monaPerEth) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const network = getEnabledNetworkByChainId(chainId);\n      const auctionContractAddress = config.AUCTION_CONTRACT_ADDRESS[network.alias];\n      const contract = await getContract(auctionContractAddress);\n      const weiValue = convertToWei(value);\n      const monaContractAddress = await getMonaContractAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods.allowance(account, auctionContractAddress).call({\n        from: account\n      });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n\n      if (jsAllowedValue < 10000000000) {\n        const listener = monaContract.methods.approve(auctionContractAddress, convertToWei(20000000000)).send({\n          from: account\n        });\n        const promise = new Promise((resolve, reject) => {\n          listener.on(\"error\", error => reject(error));\n          listener.on(\"confirmation\", transactionHash => resolve(transactionHash));\n        });\n        return {\n          promise,\n          unsubscribe: () => {\n            listener.off(\"error\");\n            listener.off(\"transactionHash\");\n          }\n        };\n      }\n\n      const listener = contract.methods.placeBid(id, weiValue).send({\n        from: account\n      });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", error => reject(error));\n        listener.on(\"transactionHash\", transactionHash => resolve(transactionHash));\n      });\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        }\n      };\n    };\n  }\n\n  getAllowanceForAcution() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const network = getEnabledNetworkByChainId(chainId);\n      const auctionContractAddress = config.AUCTION_CONTRACT_ADDRESS[network.alias];\n      const monaContractAddress = await getMonaContractAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods.allowance(account, auctionContractAddress).call({\n        from: account\n      });\n      return allowedValue;\n    };\n  }\n\n  getApprovedInMona() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const marketplaceContract = await getMarketplaceContractAddressByChainId(chainId);\n      const monaContractAddress = await getMonaContractAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods.allowance(account, marketplaceContract).call({\n        from: account\n      });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      return jsAllowedValue > 10000000000;\n    };\n  }\n\n  getSecondaryApprovedInMona() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const monaContractAddress = await getMonaContractAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods.allowance(account, secondaryMarketplaceAddress).call({\n        from: account\n      });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      return jsAllowedValue > 10000000000;\n    };\n  }\n\n  getSecondaryNftApproved(tokenAddress, tokenId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n      const approved = await tokenContract.methods.isApproved(tokenId, secondaryMarketplaceAddress).call({\n        from: account\n      });\n      return approved;\n    };\n  }\n\n  approveSecondaryNft(tokenAddress, tokenId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n      const res = await tokenContract.methods.setApprovalForAll(secondaryMarketplaceAddress, true).send({\n        from: account\n      });\n      return res;\n    };\n  }\n\n  addSecondaryMarketplaceProduct(tokenAddress, tokenId, value, buyOrSell) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(address); // const allowedValue = await monaContract.methods\n      //   .allowance(account, secondaryMarketplaceAddress)\n      //   .call({ from: account });\n      // const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      // if (jsAllowedValue < 10000000000) {\n      //   await monaContract.methods\n      //     .approve(secondaryMarketplaceAddress, convertToWei(20000000000))\n      //     .send({ from: account });\n      // }\n\n      const secondaryMarketplaceContract = await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods.addOrder(tokenAddress, constants.AddressZero, buyOrSell, 0, [tokenId], ethersUtils.parseEther(`${parseFloat(value).toFixed(18)}`), Date.now() + 157800000, 10, 100, constants.AddressZero).send({\n        from: account,\n        value: 0\n      });\n      return res;\n    };\n  }\n\n  updateSecondaryMarketplaceOrder(tokenAddress, orderIndex, tokenIds, price) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress); // const approved = await tokenContract.methods\n      //   .isApproved(tokenIds[0], secondaryMarketplaceAddress)\n      //   .call({ from: account });\n      // if (!approved) {\n      //   await tokenContract.methods.setApprovalForAll(secondaryMarketplaceAddress, true).send({\n      //     from: account,\n      //   });\n      // }\n\n      const secondaryMarketplaceContract = await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods.updateOrder(tokenAddress, orderIndex, constants.AddressZero, tokenIds, ethersUtils.parseEther(`${parseFloat(price).toFixed(18)}`), Date.now() + 157800000, 10, 100, constants.AddressZero).send({\n        from: account,\n        value: 0\n      });\n      return res;\n    };\n  }\n\n  delistSecondaryNft(tokenAddress, orderId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceContract = await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods.disableOrder(tokenAddress, orderId, account).send({\n        from: account\n      });\n      return res;\n    };\n  }\n\n  secondaryBuyNow(id, orderId, tokenAddress, value, buyOrSell = false) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress = await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n\n      if (!buyOrSell) {\n        const monaContract = await getMonaTokenContract(address);\n        const allowedValue = await monaContract.methods.allowance(account, secondaryMarketplaceAddress).call({\n          from: account\n        });\n        const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n\n        if (jsAllowedValue < 10000000000) {\n          await monaContract.methods.approve(secondaryMarketplaceAddress, convertToWei(20000000000)).send({\n            from: account\n          });\n        }\n      }\n\n      const approved = await tokenContract.methods.isApprovedForAll(account, secondaryMarketplaceAddress).call({\n        from: account\n      });\n\n      if (!approved) {\n        await tokenContract.methods.setApprovalForAll(secondaryMarketplaceAddress, true).send({\n          from: account\n        });\n      }\n\n      const secondaryMarketplaceContract = await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods.executeOrders([tokenAddress], [orderId], [[id]], buyOrSell ? ethersUtils.parseEther(`${parseFloat(value).toFixed(18)}`) : ethersUtils.parseEther(`-${parseFloat(value).toFixed(18)}`), 100, constants.AddressZero).send({\n        from: account,\n        value: 0\n      });\n      return res;\n    };\n  }\n\n  buyNow(id, value, isMona) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      console.log({\n        account\n      });\n      const marketplaceContract = await getMarketplaceContractAddressByChainId(chainId);\n      const contract = await getMarketplaceContract(chainId);\n\n      if (isMona) {\n        const monaContractAddress = await getMonaContractAddressByChainId(chainId);\n        const monaContract = await getMonaTokenContract(monaContractAddress);\n        const allowedValue = await monaContract.methods.allowance(account, marketplaceContract).call({\n          from: account\n        });\n        const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n\n        if (jsAllowedValue < 10000000000) {\n          const listener = monaContract.methods.approve(marketplaceContract, convertToWei(20000000000)).send({\n            from: account\n          });\n          const promise = new Promise((resolve, reject) => {\n            listener.on(\"error\", error => reject(error));\n            listener.on(\"confirmation\", transactionHash => resolve(transactionHash));\n          });\n          return {\n            promise,\n            unsubscribe: () => {\n              listener.off(\"error\");\n              listener.off(\"transactionHash\");\n            }\n          };\n        }\n      }\n\n      console.log({\n        contract\n      });\n      console.log({\n        id\n      });\n      const listener = contract.methods.buyOffer(id).send({\n        from: account\n      });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", error => reject(error));\n        listener.on(\"confirmation\", transactionHash => resolve(transactionHash));\n      });\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        }\n      };\n    };\n  }\n\n  withdraw(id) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const auctionContractAddress = getState().global.get(\"auctionContractAddress\");\n      const contract = await getContract(auctionContractAddress);\n      const listener = contract.methods.withdrawBid(id).send({\n        from: account\n      });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", error => reject(error));\n        listener.on(\"transactionHash\", transactionHash => resolve(transactionHash));\n      });\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        }\n      };\n    };\n  }\n\n}\n\nexport default new BidActions(auctionReducer);","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/actions/bid.actions.js"],"names":["BaseActions","utils","ethersUtils","constants","BigNumber","config","convertToWei","getEnabledNetworkByChainId","getMarketplaceContractAddressByChainId","getMonaContractAddressByChainId","getSecondaryMarketplaceAddressByChainId","auctionReducer","getContract","getMarketplaceContract","getMonaTokenContract","getERC721Contract","getSecondaryMarketplaceContract","BidActions","bid","id","value","monaPerEth","_","getState","account","user","get","chainId","global","network","auctionContractAddress","AUCTION_CONTRACT_ADDRESS","alias","contract","weiValue","monaContractAddress","monaContract","allowedValue","methods","allowance","call","from","jsAllowedValue","parseFloat","formatEther","listener","approve","send","promise","Promise","resolve","reject","on","error","transactionHash","unsubscribe","off","placeBid","getAllowanceForAcution","getApprovedInMona","marketplaceContract","getSecondaryApprovedInMona","secondaryMarketplaceAddress","getSecondaryNftApproved","tokenAddress","tokenId","tokenContract","approved","isApproved","approveSecondaryNft","res","setApprovalForAll","addSecondaryMarketplaceProduct","buyOrSell","address","secondaryMarketplaceContract","addOrder","AddressZero","parseEther","toFixed","Date","now","updateSecondaryMarketplaceOrder","orderIndex","tokenIds","price","updateOrder","delistSecondaryNft","orderId","disableOrder","secondaryBuyNow","isApprovedForAll","executeOrders","buyNow","isMona","console","log","buyOffer","withdraw","withdrawBid"],"mappings":"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","sourcesContent":["import BaseActions from \"@actions/base-actions\";\nimport { utils as ethersUtils, constants, BigNumber } from \"ethers\";\nimport { utils } from \"web3\";\nimport config from \"@utils/config\";\nimport { convertToWei } from \"@helpers/price.helpers\";\nimport {\n  getEnabledNetworkByChainId,\n  getMarketplaceContractAddressByChainId,\n  getMonaContractAddressByChainId,\n  getSecondaryMarketplaceAddressByChainId,\n} from \"@services/network.service\";\n\nimport auctionReducer from \"../reducers/auction.reducer\";\nimport {\n  getContract,\n  getMarketplaceContract,\n  getMonaTokenContract,\n  getERC721Contract,\n  getSecondaryMarketplaceContract,\n} from \"../services/contract.service\";\n\nclass BidActions extends BaseActions {\n  bid(id, value, monaPerEth) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const network = getEnabledNetworkByChainId(chainId);\n      const auctionContractAddress =\n        config.AUCTION_CONTRACT_ADDRESS[network.alias];\n      const contract = await getContract(auctionContractAddress);\n      const weiValue = convertToWei(value);\n\n      const monaContractAddress = await getMonaContractAddressByChainId(\n        chainId\n      );\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods\n        .allowance(account, auctionContractAddress)\n        .call({ from: account });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      if (jsAllowedValue < 10000000000) {\n        const listener = monaContract.methods\n          .approve(auctionContractAddress, convertToWei(20000000000))\n          .send({ from: account });\n        const promise = new Promise((resolve, reject) => {\n          listener.on(\"error\", (error) => reject(error));\n          listener.on(\"confirmation\", (transactionHash) =>\n            resolve(transactionHash)\n          );\n        });\n        return {\n          promise,\n          unsubscribe: () => {\n            listener.off(\"error\");\n            listener.off(\"transactionHash\");\n          },\n        };\n      }\n      const listener = contract.methods\n        .placeBid(id, weiValue)\n        .send({ from: account });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", (error) => reject(error));\n        listener.on(\"transactionHash\", (transactionHash) =>\n          resolve(transactionHash)\n        );\n      });\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        },\n      };\n    };\n  }\n\n  getAllowanceForAcution() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const network = getEnabledNetworkByChainId(chainId);\n      const auctionContractAddress =\n        config.AUCTION_CONTRACT_ADDRESS[network.alias];\n      const monaContractAddress = await getMonaContractAddressByChainId(\n        chainId\n      );\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods\n        .allowance(account, auctionContractAddress)\n        .call({ from: account });\n      return allowedValue;\n    };\n  }\n\n  getApprovedInMona() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const marketplaceContract = await getMarketplaceContractAddressByChainId(\n        chainId\n      );\n      const monaContractAddress = await getMonaContractAddressByChainId(\n        chainId\n      );\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods\n        .allowance(account, marketplaceContract)\n        .call({ from: account });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      return jsAllowedValue > 10000000000;\n    };\n  }\n\n  getSecondaryApprovedInMona() {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const monaContractAddress = await getMonaContractAddressByChainId(\n        chainId\n      );\n      const monaContract = await getMonaTokenContract(monaContractAddress);\n      const allowedValue = await monaContract.methods\n        .allowance(account, secondaryMarketplaceAddress)\n        .call({ from: account });\n      const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      return jsAllowedValue > 10000000000;\n    };\n  }\n\n  getSecondaryNftApproved(tokenAddress, tokenId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n\n      const approved = await tokenContract.methods\n        .isApproved(tokenId, secondaryMarketplaceAddress)\n        .call({ from: account });\n\n      return approved;\n    };\n  }\n\n  approveSecondaryNft(tokenAddress, tokenId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n\n      const res = await tokenContract.methods\n        .setApprovalForAll(secondaryMarketplaceAddress, true)\n        .send({ from: account });\n\n      return res;\n    };\n  }\n\n  addSecondaryMarketplaceProduct(tokenAddress, tokenId, value, buyOrSell) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const monaContract = await getMonaTokenContract(address);\n\n      // const allowedValue = await monaContract.methods\n      //   .allowance(account, secondaryMarketplaceAddress)\n      //   .call({ from: account });\n      // const jsAllowedValue = parseFloat(ethersUtils.formatEther(allowedValue));\n      // if (jsAllowedValue < 10000000000) {\n      //   await monaContract.methods\n      //     .approve(secondaryMarketplaceAddress, convertToWei(20000000000))\n      //     .send({ from: account });\n      // }\n\n      const secondaryMarketplaceContract =\n        await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods\n        .addOrder(\n          tokenAddress,\n          constants.AddressZero,\n          buyOrSell,\n          0,\n          [tokenId],\n          ethersUtils.parseEther(`${parseFloat(value).toFixed(18)}`),\n          Date.now() + 157800000,\n          10,\n          100,\n          constants.AddressZero\n        )\n        .send({ from: account, value: 0 });\n\n      return res;\n    };\n  }\n\n  updateSecondaryMarketplaceOrder(tokenAddress, orderIndex, tokenIds, price) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n      // const approved = await tokenContract.methods\n      //   .isApproved(tokenIds[0], secondaryMarketplaceAddress)\n      //   .call({ from: account });\n\n      // if (!approved) {\n      //   await tokenContract.methods.setApprovalForAll(secondaryMarketplaceAddress, true).send({\n      //     from: account,\n      //   });\n      // }\n\n      const secondaryMarketplaceContract =\n        await getSecondaryMarketplaceContract(chainId);\n      const res = await secondaryMarketplaceContract.methods\n        .updateOrder(\n          tokenAddress,\n          orderIndex,\n          constants.AddressZero,\n          tokenIds,\n          ethersUtils.parseEther(`${parseFloat(price).toFixed(18)}`),\n          Date.now() + 157800000,\n          10,\n          100,\n          constants.AddressZero\n        )\n        .send({ from: account, value: 0 });\n\n      return res;\n    };\n  }\n\n  delistSecondaryNft(tokenAddress, orderId) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const secondaryMarketplaceContract =\n        await getSecondaryMarketplaceContract(chainId);\n\n      const res = await secondaryMarketplaceContract.methods\n        .disableOrder(tokenAddress, orderId, account)\n        .send({ from: account });\n\n      return res;\n    };\n  }\n\n  secondaryBuyNow(id, orderId, tokenAddress, value, buyOrSell = false) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      const address = await getMonaContractAddressByChainId(chainId);\n      const secondaryMarketplaceAddress =\n        await getSecondaryMarketplaceAddressByChainId(chainId);\n      const tokenContract = await getERC721Contract(tokenAddress);\n      if (!buyOrSell) {\n        const monaContract = await getMonaTokenContract(address);\n\n        const allowedValue = await monaContract.methods\n          .allowance(account, secondaryMarketplaceAddress)\n          .call({ from: account });\n        const jsAllowedValue = parseFloat(\n          ethersUtils.formatEther(allowedValue)\n        );\n        if (jsAllowedValue < 10000000000) {\n          await monaContract.methods\n            .approve(secondaryMarketplaceAddress, convertToWei(20000000000))\n            .send({ from: account });\n        }\n      }\n\n      const approved = await tokenContract.methods\n        .isApprovedForAll(account, secondaryMarketplaceAddress)\n        .call({ from: account });\n\n      if (!approved) {\n        await tokenContract.methods\n          .setApprovalForAll(secondaryMarketplaceAddress, true)\n          .send({\n            from: account,\n          });\n      }\n\n      const secondaryMarketplaceContract =\n        await getSecondaryMarketplaceContract(chainId);\n\n      const res = await secondaryMarketplaceContract.methods\n        .executeOrders(\n          [tokenAddress],\n          [orderId],\n          [[id]],\n          buyOrSell\n            ? ethersUtils.parseEther(`${parseFloat(value).toFixed(18)}`)\n            : ethersUtils.parseEther(`-${parseFloat(value).toFixed(18)}`),\n          100,\n          constants.AddressZero\n        )\n        .send({\n          from: account,\n          value: 0,\n        });\n\n      return res;\n    };\n  }\n\n  buyNow(id, value, isMona) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const chainId = getState().global.get(\"chainId\");\n      console.log({ account });\n      const marketplaceContract = await getMarketplaceContractAddressByChainId(\n        chainId\n      );\n      const contract = await getMarketplaceContract(chainId);\n      if (isMona) {\n        const monaContractAddress = await getMonaContractAddressByChainId(\n          chainId\n        );\n        const monaContract = await getMonaTokenContract(monaContractAddress);\n        const allowedValue = await monaContract.methods\n          .allowance(account, marketplaceContract)\n          .call({ from: account });\n        const jsAllowedValue = parseFloat(\n          ethersUtils.formatEther(allowedValue)\n        );\n        if (jsAllowedValue < 10000000000) {\n          const listener = monaContract.methods\n            .approve(marketplaceContract, convertToWei(20000000000))\n            .send({ from: account });\n          const promise = new Promise((resolve, reject) => {\n            listener.on(\"error\", (error) => reject(error));\n            listener.on(\"confirmation\", (transactionHash) =>\n              resolve(transactionHash)\n            );\n          });\n          return {\n            promise,\n            unsubscribe: () => {\n              listener.off(\"error\");\n              listener.off(\"transactionHash\");\n            },\n          };\n        }\n      }\n      console.log({ contract });\n      console.log({ id });\n      const listener = contract.methods.buyOffer(id).send({ from: account });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", (error) => reject(error));\n        listener.on(\"confirmation\", (transactionHash) =>\n          resolve(transactionHash)\n        );\n      });\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        },\n      };\n    };\n  }\n\n  withdraw(id) {\n    return async (_, getState) => {\n      const account = getState().user.get(\"account\");\n      const auctionContractAddress = getState().global.get(\n        \"auctionContractAddress\"\n      );\n      const contract = await getContract(auctionContractAddress);\n      const listener = contract.methods.withdrawBid(id).send({ from: account });\n      const promise = new Promise((resolve, reject) => {\n        listener.on(\"error\", (error) => reject(error));\n        listener.on(\"transactionHash\", (transactionHash) =>\n          resolve(transactionHash)\n        );\n      });\n\n      return {\n        promise,\n        unsubscribe: () => {\n          listener.off(\"error\");\n          listener.off(\"transactionHash\");\n        },\n      };\n    };\n  }\n}\n\nexport default new BidActions(auctionReducer);\n"]},"metadata":{},"sourceType":"module"}