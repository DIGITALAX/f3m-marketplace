{"ast":null,"code":"import { gql } from \"graphql-request\";\nexport const COLLECTIONS = gql`\n  query collections {\n    digitalaxGarmentCollections(first: 1000) {\n      id\n      garmentAuctionID\n      rarity\n    }\n  }\n`;\nexport const COLLECTIONSV2 = gql`\n  query collectionsv2 {\n    digitalaxModelCollections(first: 1000) {\n      id\n      garmentAuctionID\n      rarity\n      valueSold\n    }\n  }\n`;\nexport const COLLECTION_GROUPS = gql`\n  query digitalaxModelCollectionGroups {\n    digitalaxModelCollectionGroups(first: 100) {\n      id\n      collections(where: { id_not: \"0\" }) {\n        id\n        rarity\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n        }\n        model {\n          id\n          name\n          image\n        }\n        designer {\n          id\n          name\n          image\n        }\n        valueSold\n      }\n      digiBundle(where: { id_not: \"0\" }) {\n        id\n        rarity\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n        }\n        model {\n          id\n          name\n          image\n        }\n        designer {\n          id\n          name\n          image\n        }\n        valueSold\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_COLLECTIONS = gql`\n  query digitalaxGarmentCollections {\n    digitalaxGarmentCollections(first: 10) {\n      id\n      rarity\n      valueSold\n      garments(first: 1000) {\n        id\n        animation\n        name\n      }\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_OFFERS = gql`\n  query digitalaxModelMarketplaceOffers {\n    digitalaxModelMarketplaceOffers(first: 100) {\n      id\n      primarySalePrice\n      garmentCollection {\n        id\n        garments {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\nexport const COLLECTION_GROUP_BY_ID = gql`\n  query digitalaxModelCollectionGroup($id: ID!) {\n    digitalaxModelCollectionGroup(id: $id) {\n      id\n      collections(where: { id_not: \"0\" }) {\n        id\n        designer {\n          id\n          name\n          image\n        }\n        developer {\n          id\n          name\n          image\n        }\n        model {\n          id\n          name\n          image\n        }\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n          designer\n          description\n          primarySalePrice\n        }\n        rarity\n      }\n    }\n  }\n`;\nexport const GARMENTV2_BY_COLLECTION_ID = gql`\n  query digitalaxModelCollection($id: ID!) {\n    digitalaxModelCollection(id: $id) {\n      id\n      garments(first: 1000) {\n        id\n        name\n        image\n        animation\n        description\n        tokenUri\n        primarySalePrice\n        children {\n          id\n          tokenUri\n        }\n        attributes {\n          type\n          value\n        }\n        additionalSources {\n          id\n          url\n          type\n        }\n      }\n      designer {\n        id\n        name\n        description\n        image\n      }\n      model {\n        id\n        name\n        description\n        image\n      }\n      developer {\n        id\n        name\n        description\n        image\n      }\n    }\n  }\n`;\nexport const GARMENTV2_BY_COLLECTION_IDS = gql`\n  query digitalaxModelCollections($ids: [ID!]) {\n    digitalaxModelCollections(where: { id_in: $ids }) {\n      id\n      garments(first: 1) {\n        id\n        image\n        animation\n      }\n    }\n  }\n`;\nexport const GARMENT_BY_COLLECTION_ID = gql`\n  query digitalaxGarmentCollection($id: ID!) {\n    digitalaxGarmentCollection(id: $id) {\n      id\n      garments(first: 1) {\n        id\n        name\n        animation\n        description\n        primarySalePrice\n      }\n    }\n  }\n`;\nexport const GARMENTV2_BY_AUCTION_ID = gql`\n  query digitalaxGarmentV2Auction($id: ID!) {\n    digitalaxGarmentV2Auction(id: $id) {\n      id\n      reservePrice\n      startTime\n      endTime\n      topBid\n      reservePrice\n      resulted\n      garment {\n        id\n        name\n        image\n        animation\n        description\n        owner\n        primarySalePrice\n      }\n      designer {\n        id\n        name\n        description\n        image\n      }\n      developer {\n        id\n        name\n        description\n        image\n      }\n    }\n  }\n`;\nexport const GARMENT_BY_AUCTION_ID = gql`\n  query digitalaxGarmentAuction($id: ID!) {\n    digitalaxGarmentAuction(id: $id) {\n      id\n      startTime\n      endTime\n      topBid\n      garment {\n        id\n        name\n        image\n        animation\n        description\n        primarySalePrice\n      }\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_V2_OFFER = gql`\n  query digitalaxModelMarketplaceOffers($garmentCollection: String!) {\n    digitalaxModelMarketplaceOffers(\n      where: { garmentCollection: $garmentCollection }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_OFFER = gql`\n  query digitalaxModelMarketplaceOffers($garmentCollection: String!) {\n    digitalaxModelMarketplaceOffers(\n      where: { garmentCollection: $garmentCollection }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_V2_OFFERS = gql`\n  query digitalaxModelMarketplaceOffers {\n    digitalaxModelMarketplaceOffers(\n      first: 1000\n      where: { garmentCollection_gte: \"0\" }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        id\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_V2_PURCHASE_HISTORIES = gql`\n  query digitalaxModelMarketplacePurchaseHistories($ids: [ID!]) {\n    digitalaxModelMarketplacePurchaseHistories(where: { token_in: $ids }) {\n      id\n      timestamp\n      transactionHash\n      buyer\n      eventName\n      value\n    }\n  }\n`;\nexport const DIGITALAX_MARKETPLACE_PURCHASE_HISTORIES = gql`\n  query digitalaxMarketplacePurchaseHistories($ids: [ID!]) {\n    digitalaxMarketplacePurchaseHistories(where: { token_in: $ids }) {\n      id\n      timestamp\n      transactionHash\n      buyer\n      eventName\n      value\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2_PURCHASE_HISTORIES = gql`\n  query digitalaxGarmentV2PurchaseHistories($id: ID) {\n    digitalaxGarmentV2AuctionHistories(where: { token: $id, value_not: null }) {\n      id\n      timestamp\n      transactionHash\n      value\n      bidder {\n        id\n      }\n      token {\n        id\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_PURCHASE_HISTORIES = gql`\n  query digitalaxGarmentPurchaseHistories($id: ID!) {\n    digitalaxGarmentAuctionHistories(where: { token: $id, value_not: null }) {\n      id\n      timestamp\n      transactionHash\n      value\n      bidder {\n        id\n      }\n      token {\n        id\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_AUCTIONS = gql`\n  query digitalaxGarmentAuctions {\n    digitalaxGarmentAuctions(first: 4) {\n      id\n      garment {\n        id\n        animation\n        image\n        name\n        designer\n        description\n      }\n      topBid\n      startTime\n      endTime\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2S = gql`\n  query digitalaxModelNFTs($ids: [ID!]) {\n    digitalaxModelNFTs(where: { id_in: $ids }) {\n      id\n      owner\n    }\n  }\n`; // For Profile Page\n// DIGITALAX GARMENTS (eth, polygon)\n\nexport const DIGITALAX_GARMENTS_BY_OWNER = gql`\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`;\nexport const DIGITALAX_GARMENTS = gql`\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`; // (polygon only)\n\nexport const DIGITALAX_GARMENT_V2S_BY_OWNER = gql`\n  query digitalaxModelNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxModelNFTs(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`; // (polygon digi bundle)\n\nexport const DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql`\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptions(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      name\n      owner\n      tokenUri\n      image\n      animation\n      designer\n    }\n  }\n`; // polygon digifizzy 1155\n\nexport const DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql`\n  query digitalaxSubscriptionCollectors(\n    $owner: ID!\n    $first: Int!\n    $lastID: ID!\n  ) {\n    digitalaxSubscriptionCollectors(\n      first: $first\n      where: { id: $owner, id_gt: $lastID }\n    ) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`; // staked fashion NFTs polygon\n\nexport const DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql`\n  query digitalaxNFTStakers($staker: ID!) {\n    digitalaxNFTStakers(where: { id: $staker }) {\n      id\n      garments {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // staked fashion NFTs ethereum\n\nexport const DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentStakedTokens(\n      first: $first\n      where: { staker: $staker, id_gt: $lastID }\n    ) {\n      id\n      staker\n    }\n  }\n`; // genesis NFTs ethereum\n\nexport const DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql`\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // genesis NFTs by ids ethereum\n\nexport const DIGITALAX_GENESIS_NFTS = gql`\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(\n      first: $first\n      where: { id_in: $ids, id_gt: $lastID }\n    ) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // staked genesis NFTs ethereum\n\nexport const DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisStakedTokens(\n      first: $first\n      where: { staker: $staker, id_gt: $lastID }\n    ) {\n      id\n      staker\n    }\n  }\n`; // get collection id by garment id polygon\n\nexport const DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql`\n  query digitalaxModelCollections($garmentIDs: [ID!]) {\n    digitalaxModelCollections(where: { garments_contains: $garmentIDs }) {\n      id\n      rarity\n      garmentAuctionID\n    }\n  }\n`; // get pode tokens by owner\n\nexport const PODE_NFT_V2S_BY_ADDRESS = gql`\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      tokenUri\n      name\n      animation\n    }\n  }\n`; // get staked pode tokens by staker\n\nexport const PODE_NFT_V2_STAKERS_BY_ADDRESS = gql`\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n      }\n    }\n  }\n`; // polygon digitalax 1155\n\nexport const DIGITALAX_COLLETOR_V2_BY_OWNER = gql`\n  query digitalaxModelCollector($owner: ID!) {\n    digitalaxModelCollector(id: $owner) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`; // gdn membership token polygon\n\nexport const GDN_MEMBERSHIP_NFTS_BY_OWNER = gql`\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`; // digitalax look (loot for fashion) nfts mainnet\n\nexport const DIGITALAX_LOOK_NFTS_BY_OWNER = gql`\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      background\n      texture\n      pattern\n      color\n      shape\n      flare\n      form\n      line\n      element\n      tokenUri\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS = gql`\n  query digitalaxModelCollections($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxModelCollections(\n      first: $first\n      where: { id_in: $ids, id_gt: $lastID }\n    ) {\n      id\n      garments(first: 1000) {\n        id\n      }\n    }\n  }\n`;\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql`\n  query digitalaxModelCollections(\n    $garmentIDs: [ID!]\n    $first: Int!\n    $lastID: ID!\n  ) {\n    digitalaxModelCollections(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\nexport const DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql`\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookGoldenTickets(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      name\n      description\n      animation\n      image\n      owner\n      tokenUri\n    }\n  }\n`; // staked nfts by id list on polygon\n\nexport const DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql`\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // whitelisted staked nfts on dlta by id list on polygon\n\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql`\n  query guildWhitelistedNFTStakers(\n    $garmentIDs: [ID!]\n    $first: Int!\n    $lastID: ID!\n  ) {\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`; // get staked pode tokens by staker\n\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql`\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(\n      first: $first\n      where: { id: $staker, id_gt: $lastID }\n    ) {\n      id\n      garments {\n        id\n        owner\n        tokenAddress\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\nexport const GET_ALL_NFTS = gql`\n  query nfts {\n    nfts(first: 1000) {\n      id\n      tokenId\n      token {\n        id\n      }\n      name\n      description\n      lastSalePrice\n      lastSeller\n      lastBuyer\n      tradeCount\n      totalVolume\n      lastRoyaltyFactor\n      lastTradeIndex\n      uri\n    }\n  }\n`;\nexport const GET_ALL_NFTS_BY_OWNER = gql`\n  query tokens($addresses: [ID!], $owner: ID!) {\n    tokens(first: 1000, where: { owner: $owner }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      owner {\n        id\n      }\n    }\n  }\n`;\nexport const GET_ALL_NFTS_BY_IDS = gql`\n  query tokens($ids: [ID!]) {\n    tokens(first: 1000, where: { id_in: $ids }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      owner {\n        id\n      }\n    }\n  }\n`;\nexport const GET_NFT_BY_ID = gql`\n  query token($id: ID!) {\n    token(id: $id) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      metadata\n      owner {\n        id\n      }\n    }\n  }\n`;\nexport const GET_NFT_BY_CONTRACT_AND_TOKEN_ID = gql`\n  query tokens($contract: String!, $tokenId: String!) {\n    tokens(where: { contract: $contract, tokenID: $tokenId }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      metadata\n      owner {\n        id\n      }\n    }\n  }\n`;\nexport const IS_NFT_LISTED = gql`\n  query orders($owner: String, $token: String, $tokenId: [String!]) {\n    orders(\n      where: {\n        maker: $owner\n        token: $token\n        tokenIds_contains: $tokenId\n        expiry: 0\n      }\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\nexport const GET_SECONDARY_ORDER_BY_CONTRACT_AND_TOKEN_ID = gql`\n  query orders($contract: String!, $tokenIds: [String!]) {\n    orders(where: { token: $contract, tokenIds_contains: $tokenIds }) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\nexport const GET_SECONDARY_ORDER_BY_CONTRACT_TOKEN_AND_BUY_OR_SELL = gql`\n  query orders($contract: String!, $tokenIds: [String!], $buyOrSell: String) {\n    orders(\n      where: {\n        token: $contract\n        tokenIds_contains: $tokenIds\n        buyOrSell: $buyOrSell\n      }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      createdTxHash\n      executedTokenIds\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      timestamp\n    }\n  }\n`;\nexport const GET_SECODARY_ORDERS_BY_OWNER = gql`\n  query orders($owner: String!) {\n    orders(where: { maker: $owner }) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\nexport const GET_SECONDARY_ORDERS = gql`\n  query orders {\n    orders(\n      where: { buyOrSell: \"Buy\" }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      createdTxHash\n      executedTokenIds\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      timestamp\n    }\n  }\n`;\nexport const GET_SELLING_NFTS = gql`\n  query orders {\n    orders(\n      where: { buyOrSell: \"Sell\" }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      executedTokenIds\n      timestamp\n    }\n  }\n`;\nexport const GET_SECONDARY_NFT_INFO = gql`\n  query nft($id: ID!) {\n    nft(id: $id) {\n      id\n      tokenId\n      token {\n        id\n      }\n      lastSalePrice\n      lastSeller\n      lastBuyer\n      tradeCount\n      totalVolume\n      lastRoyaltyFactor\n      lastTradeIndex\n      lastOrderIndex\n      orders {\n        id\n      }\n      trades {\n        id\n      }\n    }\n  }\n`;\nexport const GET_TRADES_BY_ORDER_ID = gql`\n  query trades($ids: [String!]) {\n    trades(where: { orders_contains: $ids }) {\n      id\n      royaltyFactor\n      blockNumber\n      taker\n      timestamp\n      executedTxHash\n      orders(where: { id_in: $ids }) {\n        id\n        price\n      }\n      tokens {\n        id\n      }\n    }\n  }\n`;\nexport const GET_ALL_TRADES_BY_TOKEN_AND_TOKENID = gql`\n  query trades {\n    trades {\n      id\n      royaltyFactor\n      blockNumber\n      taker\n      timestamp\n      executedTxHash\n      orders {\n        tokenIds\n        id\n        price\n      }\n      tokens {\n        id\n      }\n    }\n  }\n`;\nexport const GET_DIGITALAX_COLLECTION_GROUPS_BY_GARMENT = gql`\n  query digitalaxModelCollectionGroups($garment: [String!]) {\n    digitalaxModelCollectionGroups(first: 1000) {\n      id\n      collections(where: { garments_contains: $garment }) {\n        garments {\n          id\n        }\n      }\n    }\n  }\n`;\nexport const PATRONS_MARKETPLACE_OFFERS = gql`\n  query patronMarketplaceOffers($first: Int!, $lastID: ID!) {\n    patronMarketplaceOffers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garmentCollection {\n        id\n        garments {\n          id\n          designer\n          name\n          description\n          owner\n          tokenUri\n        }\n        designer {\n          id\n          name\n        }\n      }\n      primarySalePrice\n    }\n  }\n`;","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/services/api/gql.apiService.js"],"names":["gql","COLLECTIONS","COLLECTIONSV2","COLLECTION_GROUPS","DIGITALAX_GARMENT_COLLECTIONS","DIGITALAX_MARKETPLACE_OFFERS","COLLECTION_GROUP_BY_ID","GARMENTV2_BY_COLLECTION_ID","GARMENTV2_BY_COLLECTION_IDS","GARMENT_BY_COLLECTION_ID","GARMENTV2_BY_AUCTION_ID","GARMENT_BY_AUCTION_ID","DIGITALAX_MARKETPLACE_V2_OFFER","DIGITALAX_MARKETPLACE_OFFER","DIGITALAX_MARKETPLACE_V2_OFFERS","DIGITALAX_MARKETPLACE_V2_PURCHASE_HISTORIES","DIGITALAX_MARKETPLACE_PURCHASE_HISTORIES","DIGITALAX_GARMENT_V2_PURCHASE_HISTORIES","DIGITALAX_GARMENT_PURCHASE_HISTORIES","DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS","DIGITALAX_GARMENT_AUCTIONS","DIGITALAX_GARMENT_V2S","DIGITALAX_GARMENTS_BY_OWNER","DIGITALAX_GARMENTS","DIGITALAX_GARMENT_V2S_BY_OWNER","DIGITALAX_SUBSCRIPTIONS_BY_OWNER","DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_ADDRESS","DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS_BY_ADDRESS","DIGITALAX_GENESIS_NFTS","DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS","DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID","PODE_NFT_V2S_BY_ADDRESS","PODE_NFT_V2_STAKERS_BY_ADDRESS","DIGITALAX_COLLETOR_V2_BY_OWNER","GDN_MEMBERSHIP_NFTS_BY_OWNER","DIGITALAX_LOOK_NFTS_BY_OWNER","DIGITALAX_GARMENT_V2_COLLECTIONS","DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS","DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER","DIGITALAX_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS","GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER","GET_ALL_NFTS","GET_ALL_NFTS_BY_OWNER","GET_ALL_NFTS_BY_IDS","GET_NFT_BY_ID","GET_NFT_BY_CONTRACT_AND_TOKEN_ID","IS_NFT_LISTED","GET_SECONDARY_ORDER_BY_CONTRACT_AND_TOKEN_ID","GET_SECONDARY_ORDER_BY_CONTRACT_TOKEN_AND_BUY_OR_SELL","GET_SECODARY_ORDERS_BY_OWNER","GET_SECONDARY_ORDERS","GET_SELLING_NFTS","GET_SECONDARY_NFT_INFO","GET_TRADES_BY_ORDER_ID","GET_ALL_TRADES_BY_TOKEN_AND_TOKENID","GET_DIGITALAX_COLLECTION_GROUPS_BY_GARMENT","PATRONS_MARKETPLACE_OFFERS"],"mappings":"AAAA,SAASA,GAAT,QAAoB,iBAApB;AAEA,OAAO,MAAMC,WAAW,GAAGD,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP,OAAO,MAAME,aAAa,GAAGF,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO;AAWP,OAAO,MAAMG,iBAAiB,GAAGH,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhDO;AAkDP,OAAO,MAAMI,6BAA6B,GAAGJ,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAMK,4BAA4B,GAAGL,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;AAgBP,OAAO,MAAMM,sBAAsB,GAAGN,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlCO;AAoCP,OAAO,MAAMO,0BAA0B,GAAGP,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9CO;AAgDP,OAAO,MAAMQ,2BAA2B,GAAGR,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAMS,wBAAwB,GAAGT,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAMU,uBAAuB,GAAGV,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjCO;AAmCP,OAAO,MAAMW,qBAAqB,GAAGX,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMY,8BAA8B,GAAGZ,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMa,2BAA2B,GAAGb,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMc,+BAA+B,GAAGd,GAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP,OAAO,MAAMe,2CAA2C,GAAGf,GAAI;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAMgB,wCAAwC,GAAGhB,GAAI;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAMiB,uCAAuC,GAAGjB,GAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP,OAAO,MAAMkB,oCAAoC,GAAGlB,GAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP,OAAO,MAAMmB,qCAAqC,GAAGnB,GAAI;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMoB,0BAA0B,GAAGpB,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMqB,qBAAqB,GAAGrB,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,C,CASP;AAEA;;AACA,OAAO,MAAMsB,2BAA2B,GAAGtB,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO;AAeP,OAAO,MAAMuB,kBAAkB,GAAGvB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO,C,CAeP;;AACA,OAAO,MAAMwB,8BAA8B,GAAGxB,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAkBP;;AACA,OAAO,MAAMyB,gCAAgC,GAAGzB,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,C,CAiBP;;AACA,OAAO,MAAM0B,0CAA0C,GAAG1B,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA5BO,C,CA8BP;;AACA,OAAO,MAAM2B,gCAAgC,GAAG3B,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAkBP;;AACA,OAAO,MAAM4B,0CAA0C,GAAG5B,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVO,C,CAYP;;AACA,OAAO,MAAM6B,iCAAiC,GAAG7B,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,C,CAiBP;;AACA,OAAO,MAAM8B,sBAAsB,GAAG9B,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,C,CAiBP;;AACA,OAAO,MAAM+B,0CAA0C,GAAG/B,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVO,C,CAYP;;AACA,OAAO,MAAMgC,6CAA6C,GAAGhC,GAAI;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO,C,CAUP;;AACA,OAAO,MAAMiC,uBAAuB,GAAGjC,GAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVO,C,CAYP;;AACA,OAAO,MAAMkC,8BAA8B,GAAGlC,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO,C,CAWP;;AACA,OAAO,MAAMmC,8BAA8B,GAAGnC,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO,C,CAuBP;;AACA,OAAO,MAAMoC,4BAA4B,GAAGpC,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,C,CAcP;;AACA,OAAO,MAAMqC,4BAA4B,GAAGrC,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMsC,gCAAgC,GAAGtC,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO;AAcP,OAAO,MAAMuC,+CAA+C,GAAGvC,GAAI;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP,OAAO,MAAMwC,sCAAsC,GAAGxC,GAAI;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,C,CAiBP;;AACA,OAAO,MAAMyC,iCAAiC,GAAGzC,GAAI;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,C,CAkBP;;AACA,OAAO,MAAM0C,yCAAyC,GAAG1C,GAAI;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO,C,CAqBP;;AACA,OAAO,MAAM2C,uCAAuC,GAAG3C,GAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO;AAqBP,OAAO,MAAM4C,YAAY,GAAG5C,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP,OAAO,MAAM6C,qBAAqB,GAAG7C,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO;AAkBP,OAAO,MAAM8C,mBAAmB,GAAG9C,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO;AAkBP,OAAO,MAAM+C,aAAa,GAAG/C,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMgD,gCAAgC,GAAGhD,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMiD,aAAa,GAAGjD,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBO;AA2BP,OAAO,MAAMkD,4CAA4C,GAAGlD,GAAI;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMmD,qDAAqD,GAAGnD,GAAI;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BO;AA+BP,OAAO,MAAMoD,4BAA4B,GAAGpD,GAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMqD,oBAAoB,GAAGrD,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBO;AA2BP,OAAO,MAAMsD,gBAAgB,GAAGtD,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBO;AA0BP,OAAO,MAAMuD,sBAAsB,GAAGvD,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBO;AA0BP,OAAO,MAAMwD,sBAAsB,GAAGxD,GAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO;AAoBP,OAAO,MAAMyD,mCAAmC,GAAGzD,GAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO;AAqBP,OAAO,MAAM0D,0CAA0C,GAAG1D,GAAI;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAM2D,0BAA0B,GAAG3D,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBO","sourcesContent":["import { gql } from \"graphql-request\";\n\nexport const COLLECTIONS = gql`\n  query collections {\n    digitalaxGarmentCollections(first: 1000) {\n      id\n      garmentAuctionID\n      rarity\n    }\n  }\n`;\n\nexport const COLLECTIONSV2 = gql`\n  query collectionsv2 {\n    digitalaxModelCollections(first: 1000) {\n      id\n      garmentAuctionID\n      rarity\n      valueSold\n    }\n  }\n`;\n\nexport const COLLECTION_GROUPS = gql`\n  query digitalaxModelCollectionGroups {\n    digitalaxModelCollectionGroups(first: 100) {\n      id\n      collections(where: { id_not: \"0\" }) {\n        id\n        rarity\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n        }\n        model {\n          id\n          name\n          image\n        }\n        designer {\n          id\n          name\n          image\n        }\n        valueSold\n      }\n      digiBundle(where: { id_not: \"0\" }) {\n        id\n        rarity\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n        }\n        model {\n          id\n          name\n          image\n        }\n        designer {\n          id\n          name\n          image\n        }\n        valueSold\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_COLLECTIONS = gql`\n  query digitalaxGarmentCollections {\n    digitalaxGarmentCollections(first: 10) {\n      id\n      rarity\n      valueSold\n      garments(first: 1000) {\n        id\n        animation\n        name\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_OFFERS = gql`\n  query digitalaxModelMarketplaceOffers {\n    digitalaxModelMarketplaceOffers(first: 100) {\n      id\n      primarySalePrice\n      garmentCollection {\n        id\n        garments {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\n\nexport const COLLECTION_GROUP_BY_ID = gql`\n  query digitalaxModelCollectionGroup($id: ID!) {\n    digitalaxModelCollectionGroup(id: $id) {\n      id\n      collections(where: { id_not: \"0\" }) {\n        id\n        designer {\n          id\n          name\n          image\n        }\n        developer {\n          id\n          name\n          image\n        }\n        model {\n          id\n          name\n          image\n        }\n        garments(first: 1000) {\n          id\n          animation\n          image\n          name\n          designer\n          description\n          primarySalePrice\n        }\n        rarity\n      }\n    }\n  }\n`;\n\nexport const GARMENTV2_BY_COLLECTION_ID = gql`\n  query digitalaxModelCollection($id: ID!) {\n    digitalaxModelCollection(id: $id) {\n      id\n      garments(first: 1000) {\n        id\n        name\n        image\n        animation\n        description\n        tokenUri\n        primarySalePrice\n        children {\n          id\n          tokenUri\n        }\n        attributes {\n          type\n          value\n        }\n        additionalSources {\n          id\n          url\n          type\n        }\n      }\n      designer {\n        id\n        name\n        description\n        image\n      }\n      model {\n        id\n        name\n        description\n        image\n      }\n      developer {\n        id\n        name\n        description\n        image\n      }\n    }\n  }\n`;\n\nexport const GARMENTV2_BY_COLLECTION_IDS = gql`\n  query digitalaxModelCollections($ids: [ID!]) {\n    digitalaxModelCollections(where: { id_in: $ids }) {\n      id\n      garments(first: 1) {\n        id\n        image\n        animation\n      }\n    }\n  }\n`;\n\nexport const GARMENT_BY_COLLECTION_ID = gql`\n  query digitalaxGarmentCollection($id: ID!) {\n    digitalaxGarmentCollection(id: $id) {\n      id\n      garments(first: 1) {\n        id\n        name\n        animation\n        description\n        primarySalePrice\n      }\n    }\n  }\n`;\n\nexport const GARMENTV2_BY_AUCTION_ID = gql`\n  query digitalaxGarmentV2Auction($id: ID!) {\n    digitalaxGarmentV2Auction(id: $id) {\n      id\n      reservePrice\n      startTime\n      endTime\n      topBid\n      reservePrice\n      resulted\n      garment {\n        id\n        name\n        image\n        animation\n        description\n        owner\n        primarySalePrice\n      }\n      designer {\n        id\n        name\n        description\n        image\n      }\n      developer {\n        id\n        name\n        description\n        image\n      }\n    }\n  }\n`;\n\nexport const GARMENT_BY_AUCTION_ID = gql`\n  query digitalaxGarmentAuction($id: ID!) {\n    digitalaxGarmentAuction(id: $id) {\n      id\n      startTime\n      endTime\n      topBid\n      garment {\n        id\n        name\n        image\n        animation\n        description\n        primarySalePrice\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_V2_OFFER = gql`\n  query digitalaxModelMarketplaceOffers($garmentCollection: String!) {\n    digitalaxModelMarketplaceOffers(\n      where: { garmentCollection: $garmentCollection }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_OFFER = gql`\n  query digitalaxModelMarketplaceOffers($garmentCollection: String!) {\n    digitalaxModelMarketplaceOffers(\n      where: { garmentCollection: $garmentCollection }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      amountSold\n      garmentCollection {\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_V2_OFFERS = gql`\n  query digitalaxModelMarketplaceOffers {\n    digitalaxModelMarketplaceOffers(\n      first: 1000\n      where: { garmentCollection_gte: \"0\" }\n    ) {\n      id\n      primarySalePrice\n      startTime\n      endTime\n      amountSold\n      garmentCollection {\n        id\n        garments(first: 1000) {\n          id\n          owner\n        }\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_V2_PURCHASE_HISTORIES = gql`\n  query digitalaxModelMarketplacePurchaseHistories($ids: [ID!]) {\n    digitalaxModelMarketplacePurchaseHistories(where: { token_in: $ids }) {\n      id\n      timestamp\n      transactionHash\n      buyer\n      eventName\n      value\n    }\n  }\n`;\n\nexport const DIGITALAX_MARKETPLACE_PURCHASE_HISTORIES = gql`\n  query digitalaxMarketplacePurchaseHistories($ids: [ID!]) {\n    digitalaxMarketplacePurchaseHistories(where: { token_in: $ids }) {\n      id\n      timestamp\n      transactionHash\n      buyer\n      eventName\n      value\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_V2_PURCHASE_HISTORIES = gql`\n  query digitalaxGarmentV2PurchaseHistories($id: ID) {\n    digitalaxGarmentV2AuctionHistories(where: { token: $id, value_not: null }) {\n      id\n      timestamp\n      transactionHash\n      value\n      bidder {\n        id\n      }\n      token {\n        id\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_PURCHASE_HISTORIES = gql`\n  query digitalaxGarmentPurchaseHistories($id: ID!) {\n    digitalaxGarmentAuctionHistories(where: { token: $id, value_not: null }) {\n      id\n      timestamp\n      transactionHash\n      value\n      bidder {\n        id\n      }\n      token {\n        id\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_NFT_V2_GLOBAL_STATS = gql`\n  query digitalaxGarmentNFTV2GlobalStats {\n    digitalaxGarmentNFTV2GlobalStats(first: 1) {\n      id\n      monaPerEth\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_AUCTIONS = gql`\n  query digitalaxGarmentAuctions {\n    digitalaxGarmentAuctions(first: 4) {\n      id\n      garment {\n        id\n        animation\n        image\n        name\n        designer\n        description\n      }\n      topBid\n      startTime\n      endTime\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_V2S = gql`\n  query digitalaxModelNFTs($ids: [ID!]) {\n    digitalaxModelNFTs(where: { id_in: $ids }) {\n      id\n      owner\n    }\n  }\n`;\n\n// For Profile Page\n\n// DIGITALAX GARMENTS (eth, polygon)\nexport const DIGITALAX_GARMENTS_BY_OWNER = gql`\n  query digitalaxGarments($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENTS = gql`\n  query digitalaxGarments($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGarments(first: $first, where: { id_in: $ids, id_gt: $lastID }) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`;\n\n// (polygon only)\nexport const DIGITALAX_GARMENT_V2S_BY_OWNER = gql`\n  query digitalaxModelNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxModelNFTs(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      owner\n      designer\n      tokenUri\n      image\n      animation\n      name\n      description\n    }\n  }\n`;\n\n// (polygon digi bundle)\nexport const DIGITALAX_SUBSCRIPTIONS_BY_OWNER = gql`\n  query digitalaxSubscriptions($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxSubscriptions(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      name\n      owner\n      tokenUri\n      image\n      animation\n      designer\n    }\n  }\n`;\n\n// polygon digifizzy 1155\nexport const DIGITALAX_SUBSCRIPTION_COLLECTORS_BY_OWNER = gql`\n  query digitalaxSubscriptionCollectors(\n    $owner: ID!\n    $first: Int!\n    $lastID: ID!\n  ) {\n    digitalaxSubscriptionCollectors(\n      first: $first\n      where: { id: $owner, id_gt: $lastID }\n    ) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`;\n\n// staked fashion NFTs polygon\nexport const DIGITALAX_NFT_STAKERS_BY_ADDRESS = gql`\n  query digitalaxNFTStakers($staker: ID!) {\n    digitalaxNFTStakers(where: { id: $staker }) {\n      id\n      garments {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\n\n// staked fashion NFTs ethereum\nexport const DIGITALAX_GARMENT_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGarmentStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGarmentStakedTokens(\n      first: $first\n      where: { staker: $staker, id_gt: $lastID }\n    ) {\n      id\n      staker\n    }\n  }\n`;\n\n// genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_NFTS_BY_ADDRESS = gql`\n  query digitalaxGenesisNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`;\n\n// genesis NFTs by ids ethereum\nexport const DIGITALAX_GENESIS_NFTS = gql`\n  query digitalaxGenesisNFTs($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxGenesisNFTs(\n      first: $first\n      where: { id_in: $ids, id_gt: $lastID }\n    ) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`;\n\n// staked genesis NFTs ethereum\nexport const DIGITALAX_GENESIS_STAKED_TOKENS_BY_ADDRESS = gql`\n  query digitalaxGenesisStakedTokens($staker: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxGenesisStakedTokens(\n      first: $first\n      where: { staker: $staker, id_gt: $lastID }\n    ) {\n      id\n      staker\n    }\n  }\n`;\n\n// get collection id by garment id polygon\nexport const DIGITALAX_GARMENT_V2_COLLECTION_BY_GARMENT_ID = gql`\n  query digitalaxModelCollections($garmentIDs: [ID!]) {\n    digitalaxModelCollections(where: { garments_contains: $garmentIDs }) {\n      id\n      rarity\n      garmentAuctionID\n    }\n  }\n`;\n\n// get pode tokens by owner\nexport const PODE_NFT_V2S_BY_ADDRESS = gql`\n  query podeNFTv2S($owner: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2S(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      tokenUri\n      name\n      animation\n    }\n  }\n`;\n\n// get staked pode tokens by staker\nexport const PODE_NFT_V2_STAKERS_BY_ADDRESS = gql`\n  query podeNFTv2Stakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    podeNFTv2Stakers(first: $first, where: { id: $staker, id_gt: $lastID }) {\n      id\n      garments {\n        id\n      }\n    }\n  }\n`;\n\n// polygon digitalax 1155\nexport const DIGITALAX_COLLETOR_V2_BY_OWNER = gql`\n  query digitalaxModelCollector($owner: ID!) {\n    digitalaxModelCollector(id: $owner) {\n      id\n      childrenOwned {\n        id\n        owner\n        amount\n        tokenUri\n        token {\n          id\n          image\n          animation\n          name\n          description\n          totalSupply\n          tokenUri\n        }\n      }\n    }\n  }\n`;\n\n// gdn membership token polygon\nexport const GDN_MEMBERSHIP_NFTS_BY_OWNER = gql`\n  query gdnmembershipNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    gdnmembershipNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      owner\n      name\n      description\n      image\n      animation\n      tokenUri\n    }\n  }\n`;\n\n// digitalax look (loot for fashion) nfts mainnet\nexport const DIGITALAX_LOOK_NFTS_BY_OWNER = gql`\n  query digitalaxLookNFTs($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookNFTs(first: $first, where: { owner: $owner, id_gt: $lastID }) {\n      id\n      name\n      owner\n      background\n      texture\n      pattern\n      color\n      shape\n      flare\n      form\n      line\n      element\n      tokenUri\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS = gql`\n  query digitalaxModelCollections($ids: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxModelCollections(\n      first: $first\n      where: { id_in: $ids, id_gt: $lastID }\n    ) {\n      id\n      garments(first: 1000) {\n        id\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_GARMENT_V2_COLLECTIONS_BY_GARMENT_IDS = gql`\n  query digitalaxModelCollections(\n    $garmentIDs: [ID!]\n    $first: Int!\n    $lastID: ID!\n  ) {\n    digitalaxModelCollections(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\n\nexport const DIGITALAX_LOOK_GOLDEN_TICKETS_BY_OWNER = gql`\n  query digitalaxLookGoldenTickets($owner: ID!, $first: Int!, $lastID: ID!) {\n    digitalaxLookGoldenTickets(\n      first: $first\n      where: { owner: $owner, id_gt: $lastID }\n    ) {\n      id\n      name\n      description\n      animation\n      image\n      owner\n      tokenUri\n    }\n  }\n`;\n\n// staked nfts by id list on polygon\nexport const DIGITALAX_NFT_STAKERS_BY_GARMENTS = gql`\n  query digitalaxNFTStakers($garmentIDs: [ID!], $first: Int!, $lastID: ID!) {\n    digitalaxNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        designer\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\n\n// whitelisted staked nfts on dlta by id list on polygon\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_GARMENTS = gql`\n  query guildWhitelistedNFTStakers(\n    $garmentIDs: [ID!]\n    $first: Int!\n    $lastID: ID!\n  ) {\n    guildWhitelistedNFTStakers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garments(first: 1000, where: { id_in: $garmentIDs }) {\n        id\n        owner\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\n\n// get staked pode tokens by staker\nexport const GUILD_WHITELISTED_NFT_STAKERS_BY_STAKER = gql`\n  query guildWhitelistedNFTStakers($staker: ID!, $first: Int!, $lastID: ID!) {\n    guildWhitelistedNFTStakers(\n      first: $first\n      where: { id: $staker, id_gt: $lastID }\n    ) {\n      id\n      garments {\n        id\n        owner\n        tokenAddress\n        tokenUri\n        image\n        animation\n        name\n        description\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_NFTS = gql`\n  query nfts {\n    nfts(first: 1000) {\n      id\n      tokenId\n      token {\n        id\n      }\n      name\n      description\n      lastSalePrice\n      lastSeller\n      lastBuyer\n      tradeCount\n      totalVolume\n      lastRoyaltyFactor\n      lastTradeIndex\n      uri\n    }\n  }\n`;\n\nexport const GET_ALL_NFTS_BY_OWNER = gql`\n  query tokens($addresses: [ID!], $owner: ID!) {\n    tokens(first: 1000, where: { owner: $owner }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      owner {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_NFTS_BY_IDS = gql`\n  query tokens($ids: [ID!]) {\n    tokens(first: 1000, where: { id_in: $ids }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      owner {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_NFT_BY_ID = gql`\n  query token($id: ID!) {\n    token(id: $id) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      metadata\n      owner {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_NFT_BY_CONTRACT_AND_TOKEN_ID = gql`\n  query tokens($contract: String!, $tokenId: String!) {\n    tokens(where: { contract: $contract, tokenID: $tokenId }) {\n      id\n      name\n      description\n      image\n      contract {\n        id\n      }\n      tokenID\n      metadata\n      owner {\n        id\n      }\n    }\n  }\n`;\n\nexport const IS_NFT_LISTED = gql`\n  query orders($owner: String, $token: String, $tokenId: [String!]) {\n    orders(\n      where: {\n        maker: $owner\n        token: $token\n        tokenIds_contains: $tokenId\n        expiry: 0\n      }\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\n\nexport const GET_SECONDARY_ORDER_BY_CONTRACT_AND_TOKEN_ID = gql`\n  query orders($contract: String!, $tokenIds: [String!]) {\n    orders(where: { token: $contract, tokenIds_contains: $tokenIds }) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\n\nexport const GET_SECONDARY_ORDER_BY_CONTRACT_TOKEN_AND_BUY_OR_SELL = gql`\n  query orders($contract: String!, $tokenIds: [String!], $buyOrSell: String) {\n    orders(\n      where: {\n        token: $contract\n        tokenIds_contains: $tokenIds\n        buyOrSell: $buyOrSell\n      }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      createdTxHash\n      executedTokenIds\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      timestamp\n    }\n  }\n`;\n\nexport const GET_SECODARY_ORDERS_BY_OWNER = gql`\n  query orders($owner: String!) {\n    orders(where: { maker: $owner }) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n    }\n  }\n`;\n\nexport const GET_SECONDARY_ORDERS = gql`\n  query orders {\n    orders(\n      where: { buyOrSell: \"Buy\" }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      createdTxHash\n      executedTokenIds\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      timestamp\n    }\n  }\n`;\n\nexport const GET_SELLING_NFTS = gql`\n  query orders {\n    orders(\n      where: { buyOrSell: \"Sell\" }\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      id\n      price\n      token {\n        id\n      }\n      tokenIds\n      maker\n      taker\n      buyOrSell\n      anyOrAll\n      expiry\n      tradeCount\n      tradeMax\n      executedTokenIds\n      timestamp\n    }\n  }\n`;\n\nexport const GET_SECONDARY_NFT_INFO = gql`\n  query nft($id: ID!) {\n    nft(id: $id) {\n      id\n      tokenId\n      token {\n        id\n      }\n      lastSalePrice\n      lastSeller\n      lastBuyer\n      tradeCount\n      totalVolume\n      lastRoyaltyFactor\n      lastTradeIndex\n      lastOrderIndex\n      orders {\n        id\n      }\n      trades {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_TRADES_BY_ORDER_ID = gql`\n  query trades($ids: [String!]) {\n    trades(where: { orders_contains: $ids }) {\n      id\n      royaltyFactor\n      blockNumber\n      taker\n      timestamp\n      executedTxHash\n      orders(where: { id_in: $ids }) {\n        id\n        price\n      }\n      tokens {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_ALL_TRADES_BY_TOKEN_AND_TOKENID = gql`\n  query trades {\n    trades {\n      id\n      royaltyFactor\n      blockNumber\n      taker\n      timestamp\n      executedTxHash\n      orders {\n        tokenIds\n        id\n        price\n      }\n      tokens {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_DIGITALAX_COLLECTION_GROUPS_BY_GARMENT = gql`\n  query digitalaxModelCollectionGroups($garment: [String!]) {\n    digitalaxModelCollectionGroups(first: 1000) {\n      id\n      collections(where: { garments_contains: $garment }) {\n        garments {\n          id\n        }\n      }\n    }\n  }\n`;\n\nexport const PATRONS_MARKETPLACE_OFFERS = gql`\n  query patronMarketplaceOffers($first: Int!, $lastID: ID!) {\n    patronMarketplaceOffers(first: $first, where: { id_gt: $lastID }) {\n      id\n      garmentCollection {\n        id\n        garments {\n          id\n          designer\n          name\n          description\n          owner\n          tokenUri\n        }\n        designer {\n          id\n          name\n        }\n      }\n      primarySalePrice\n    }\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}