{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/history/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createPortal } from \"react-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"@components/modal\";\nimport styles from \"./styles.module.scss\";\nimport { closeBidHistoryModal, closePurchaseHistoryModal } from \"@actions/modals.actions\";\nimport { getModalParams } from \"@selectors/modal.selectors\";\nimport { getAllTradesByTokensAndTokenIds, getDigitalaxGarmentPurchaseHistories, getDigitalaxGarmentV2PurchaseHistories, getDigitalaxMarketplacePurchaseHistories, getDigitalaxMarketplaceV2PurchaseHistories } from \"@services/api/apiService\";\nimport { getChainId } from \"@selectors/global.selectors\";\nimport Loader from \"@components/loader\";\nimport { getEnabledNetworkByChainId } from \"@services/network.service\";\nimport config from \"@utils/config\";\n\nconst History = ({\n  className,\n  title,\n  type\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    tokens,\n    tokenIds,\n    v1\n  } = useSelector(getModalParams);\n  const chainId = useSelector(getChainId);\n  const {\n    0: history,\n    1: setHistory\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n\n  const handleClose = () => {\n    if (type === 1) {\n      dispatch(closeBidHistoryModal());\n    } else {\n      dispatch(closePurchaseHistoryModal());\n    }\n  };\n\n  useEffect(() => {\n    if (tokenIds.length) {\n      const fetchHistories = async () => {\n        if (type === 1) {\n          if (parseInt(tokenIds[0]) <= 4) {\n            const {\n              digitalaxGarmentAuctionHistories\n            } = await getDigitalaxGarmentPurchaseHistories(chainId, tokenIds[0]);\n            setHistory(digitalaxGarmentAuctionHistories);\n          } else {\n            const {\n              digitalaxGarmentV2AuctionHistories\n            } = await getDigitalaxGarmentV2PurchaseHistories(chainId, tokenIds[0]);\n            setHistory(digitalaxGarmentV2AuctionHistories);\n          }\n\n          setLoading(false);\n        } else {\n          if (!v1) {\n            const network = getEnabledNetworkByChainId(chainId);\n            const {\n              digitalaxModelMarketplacePurchaseHistories\n            } = await getDigitalaxMarketplaceV2PurchaseHistories(chainId, tokenIds);\n            const {\n              trades\n            } = await getAllTradesByTokensAndTokenIds(config.NIX_URL[network.alias]);\n            setHistory([...digitalaxModelMarketplacePurchaseHistories, ...trades.filter(trade => trade.orders.find(order => tokenIds.includes(order.tokenIds[0])))]);\n          } else {\n            const {\n              digitalaxMarketplacePurchaseHistories\n            } = await getDigitalaxMarketplacePurchaseHistories(chainId, tokenIds);\n            setHistory(digitalaxMarketplacePurchaseHistories);\n          }\n\n          setLoading(false);\n        }\n      };\n\n      fetchHistories();\n    }\n  }, []);\n\n  const sortHistory = data => {\n    return data.sort((a, b) => {\n      if (parseInt(a.timestamp) > parseInt(b.timestamp)) return 1;\n      if (parseInt(a.timestamp) == parseInt(b.timestamp)) return 0;\n      return -1;\n    });\n  };\n\n  return __jsx(React.Fragment, null, loading ? __jsx(Loader, {\n    active: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }) : __jsx(React.Fragment, null, /*#__PURE__*/createPortal(__jsx(Modal, {\n    onClose: () => handleClose(),\n    title: \"\".concat(type === 1 ? \"Bid\" : \"Purchase\", \" \").concat(title),\n    titleStyle: styles.textCenter,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: styles.tableWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, __jsx(\"table\", {\n    className: styles.historyTable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, \" \", type === 1 ? \"BID\" : \"PURCHASE\", \" \"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 21\n    }\n  }, \" FROM \"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, \" TX \"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, \" DATE \")), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }, sortHistory(history).map(tx => {\n    var _tx$bidder, _tx$taker;\n\n    return __jsx(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 23\n      }\n    }, __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, \" \", tx.value ? tx.value / 10 ** 18 : tx.orders[0].price / 10 ** 18, \" \", \"$MONA\", \" \"), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, \" \", type === 1 ? (_tx$bidder = tx.bidder) === null || _tx$bidder === void 0 ? void 0 : _tx$bidder.id.slice(0, 8) : tx.buyer ? tx.buyer.slice(0, 8) : (_tx$taker = tx.taker) === null || _tx$taker === void 0 ? void 0 : _tx$taker.slice(0, 8), \"...\", \" \"), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, \" \", __jsx(\"a\", {\n      href: \"https://polygonscan.com/tx/\".concat(tx.transactionHash || tx.executedTxHash),\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 27\n      }\n    }, \" \", (tx.transactionHash || tx.executedTxHash).slice(0, 8), \"...\", \" \"), \" \"), __jsx(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, \" \", new Date(parseInt(tx.timestamp) * 1000).toDateString(), \" \"));\n  }), !history.length && __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 23\n    }\n  }, \" \", __jsx(\"td\", {\n    colSpan: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 25\n    }\n  }, \"No History\"), \" \"))))), document.body)));\n};\n\n_s(History, \"XocKduBkA17MaeneFfDH1JFA/zo=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = History;\nHistory.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string\n};\nHistory.defaultProps = {\n  className: \"\",\n  title: \"History\"\n};\nexport default History;\n\nvar _c;\n\n$RefreshReg$(_c, \"History\");","map":{"version":3,"sources":["/Volumes/Data/Work/Digitalax/f3m-marketplace/src/containers/modals/history/index.js"],"names":["React","useEffect","useState","PropTypes","createPortal","useDispatch","useSelector","Modal","styles","closeBidHistoryModal","closePurchaseHistoryModal","getModalParams","getAllTradesByTokensAndTokenIds","getDigitalaxGarmentPurchaseHistories","getDigitalaxGarmentV2PurchaseHistories","getDigitalaxMarketplacePurchaseHistories","getDigitalaxMarketplaceV2PurchaseHistories","getChainId","Loader","getEnabledNetworkByChainId","config","History","className","title","type","dispatch","tokens","tokenIds","v1","chainId","history","setHistory","loading","setLoading","handleClose","length","fetchHistories","parseInt","digitalaxGarmentAuctionHistories","digitalaxGarmentV2AuctionHistories","network","digitalaxModelMarketplacePurchaseHistories","trades","NIX_URL","alias","filter","trade","orders","find","order","includes","digitalaxMarketplacePurchaseHistories","sortHistory","data","sort","a","b","timestamp","textCenter","tableWrapper","historyTable","map","tx","value","price","bidder","id","slice","buyer","taker","transactionHash","executedTxHash","Date","toDateString","document","body","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { createPortal } from \"react-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Modal from \"@components/modal\";\nimport styles from \"./styles.module.scss\";\nimport {\n  closeBidHistoryModal,\n  closePurchaseHistoryModal,\n} from \"@actions/modals.actions\";\nimport { getModalParams } from \"@selectors/modal.selectors\";\nimport {\n  getAllTradesByTokensAndTokenIds,\n  getDigitalaxGarmentPurchaseHistories,\n  getDigitalaxGarmentV2PurchaseHistories,\n  getDigitalaxMarketplacePurchaseHistories,\n  getDigitalaxMarketplaceV2PurchaseHistories,\n} from \"@services/api/apiService\";\nimport { getChainId } from \"@selectors/global.selectors\";\nimport Loader from \"@components/loader\";\nimport { getEnabledNetworkByChainId } from \"@services/network.service\";\nimport config from \"@utils/config\";\n\nconst History = ({ className, title, type }) => {\n  const dispatch = useDispatch();\n  const { tokens, tokenIds, v1 } = useSelector(getModalParams);\n  const chainId = useSelector(getChainId);\n  const [history, setHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const handleClose = () => {\n    if (type === 1) {\n      dispatch(closeBidHistoryModal());\n    } else {\n      dispatch(closePurchaseHistoryModal());\n    }\n  };\n\n  useEffect(() => {\n    if (tokenIds.length) {\n      const fetchHistories = async () => {\n        if (type === 1) {\n          if (parseInt(tokenIds[0]) <= 4) {\n            const { digitalaxGarmentAuctionHistories } =\n              await getDigitalaxGarmentPurchaseHistories(chainId, tokenIds[0]);\n            setHistory(digitalaxGarmentAuctionHistories);\n          } else {\n            const { digitalaxGarmentV2AuctionHistories } =\n              await getDigitalaxGarmentV2PurchaseHistories(\n                chainId,\n                tokenIds[0]\n              );\n            setHistory(digitalaxGarmentV2AuctionHistories);\n          }\n          setLoading(false);\n        } else {\n          if (!v1) {\n            const network = getEnabledNetworkByChainId(chainId);\n            const { digitalaxModelMarketplacePurchaseHistories } =\n              await getDigitalaxMarketplaceV2PurchaseHistories(\n                chainId,\n                tokenIds\n              );\n            const { trades } = await getAllTradesByTokensAndTokenIds(\n              config.NIX_URL[network.alias]\n            );\n            setHistory([\n              ...digitalaxModelMarketplacePurchaseHistories,\n              ...trades.filter((trade) =>\n                trade.orders.find((order) =>\n                  tokenIds.includes(order.tokenIds[0])\n                )\n              ),\n            ]);\n          } else {\n            const { digitalaxMarketplacePurchaseHistories } =\n              await getDigitalaxMarketplacePurchaseHistories(chainId, tokenIds);\n            setHistory(digitalaxMarketplacePurchaseHistories);\n          }\n          setLoading(false);\n        }\n      };\n\n      fetchHistories();\n    }\n  }, []);\n\n  const sortHistory = (data) => {\n    return data.sort((a, b) => {\n      if (parseInt(a.timestamp) > parseInt(b.timestamp)) return 1;\n      if (parseInt(a.timestamp) == parseInt(b.timestamp)) return 0;\n      return -1;\n    });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loader active={loading} />\n      ) : (\n        <>\n          {createPortal(\n            <Modal\n              onClose={() => handleClose()}\n              title={`${type === 1 ? \"Bid\" : \"Purchase\"} ${title}`}\n              titleStyle={styles.textCenter}\n              className={className}\n            >\n              <div className={styles.tableWrapper}>\n                <table className={styles.historyTable}>\n                  <thead>\n                    <th> {type === 1 ? \"BID\" : \"PURCHASE\"} </th>\n                    <th> FROM </th>\n                    <th> TX </th>\n                    <th> DATE </th>\n                  </thead>\n                  <tbody>\n                    {sortHistory(history).map((tx) => (\n                      <tr>\n                        <td>\n                          {\" \"}\n                          {tx.value\n                            ? tx.value / 10 ** 18\n                            : tx.orders[0].price / 10 ** 18}{\" \"}\n                          $MONA{\" \"}\n                        </td>\n                        <td>\n                          {\" \"}\n                          {type === 1\n                            ? tx.bidder?.id.slice(0, 8)\n                            : tx.buyer\n                            ? tx.buyer.slice(0, 8)\n                            : tx.taker?.slice(0, 8)}\n                          ...{\" \"}\n                        </td>\n                        <td>\n                          {\" \"}\n                          <a\n                            href={`https://polygonscan.com/tx/${\n                              tx.transactionHash || tx.executedTxHash\n                            }`}\n                            target=\"_blank\"\n                          >\n                            {\" \"}\n                            {(tx.transactionHash || tx.executedTxHash).slice(\n                              0,\n                              8\n                            )}\n                            ...{\" \"}\n                          </a>{\" \"}\n                        </td>\n                        <td>\n                          {\" \"}\n                          {new Date(\n                            parseInt(tx.timestamp) * 1000\n                          ).toDateString()}{\" \"}\n                        </td>\n                      </tr>\n                    ))}\n                    {!history.length && (\n                      <tr>\n                        {\" \"}\n                        <td colSpan=\"4\">No History</td>{\" \"}\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </Modal>,\n            document.body\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nHistory.propTypes = {\n  className: PropTypes.string,\n  title: PropTypes.string,\n};\n\nHistory.defaultProps = {\n  className: \"\",\n  title: \"History\",\n};\n\nexport default History;\n"]},"metadata":{},"sourceType":"module"}